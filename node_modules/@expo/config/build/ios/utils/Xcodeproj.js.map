{"version":3,"file":"Xcodeproj.js","sourceRoot":"","sources":["../../../src/ios/utils/Xcodeproj.ts"],"names":[],"mappings":"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","sourcesContent":["// @ts-ignore\nimport { sync as globSync } from 'glob';\nimport path from 'path';\nimport xcode, {\n  PBXGroup,\n  PBXNativeTarget,\n  PBXProject,\n  UUID,\n  XCBuildConfiguration,\n  XCConfigurationList,\n  XcodeProject,\n} from 'xcode';\nimport pbxFile from 'xcode/lib/pbxFile';\n\nexport type ProjectSectionEntry = [string, PBXProject];\n\nexport type NativeTargetSection = Record<string, PBXNativeTarget>;\n\nexport type NativeTargetSectionEntry = [string, PBXNativeTarget];\n\nexport type ConfigurationLists = Record<string, XCConfigurationList>;\n\nexport type ConfigurationListEntry = [string, XCConfigurationList];\n\nexport type ConfigurationSectionEntry = [string, XCBuildConfiguration];\n\nexport function getProjectName(projectRoot: string) {\n  const sourceRoot = getSourceRoot(projectRoot);\n  return path.basename(sourceRoot);\n}\n\nexport function getSourceRoot(projectRoot: string): string {\n  // Account for Swift or Objective-C\n  const paths = globSync('ios/*/AppDelegate.*', {\n    absolute: true,\n    cwd: projectRoot,\n  });\n  if (!paths.length) {\n    throw new Error(`Could not locate a valid iOS project at root: ${projectRoot}`);\n  }\n  return path.dirname(paths[0]);\n}\n\n// TODO(brentvatne): I couldn't figure out how to do this with an existing\n// higher level function exposed by the xcode library, but we should find out how to do\n// that and replace this with it\nexport function addFileToGroup(\n  filepath: string,\n  groupName: string,\n  project: XcodeProject\n): XcodeProject {\n  const file = new pbxFile(filepath);\n  file.uuid = project.generateUuid();\n  file.fileRef = project.generateUuid();\n  project.addToPbxFileReferenceSection(file);\n  project.addToPbxBuildFileSection(file);\n  project.addToPbxSourcesBuildPhase(file);\n  const group = pbxGroupByPath(project, groupName);\n  if (!group) {\n    throw Error(`Group by name ${groupName} not found!`);\n  }\n\n  group.children.push({\n    value: file.fileRef,\n    comment: file.basename,\n  });\n  return project;\n}\n\nfunction splitPath(path: string): string[] {\n  // TODO: Should we account for other platforms that may not use `/`\n  return path.split('/');\n}\n\nconst findGroup = (\n  group: PBXGroup | undefined,\n  name: string\n):\n  | {\n      value: UUID;\n      comment?: string;\n    }\n  | undefined => {\n  if (!group) {\n    return undefined;\n  }\n\n  return group.children.find(group => group.comment === name);\n};\n\nfunction findGroupInsideGroup(\n  project: XcodeProject,\n  group: PBXGroup | undefined,\n  name: string\n): null | PBXGroup {\n  const foundGroup = findGroup(group, name);\n  if (foundGroup) {\n    return project.getPBXGroupByKey(foundGroup.value) ?? null;\n  }\n  return null;\n}\n\nfunction pbxGroupByPath(project: XcodeProject, path: string): null | PBXGroup {\n  const { firstProject } = project.getFirstProject();\n\n  let group = project.getPBXGroupByKey(firstProject.mainGroup);\n\n  const components = splitPath(path);\n  for (const name of components) {\n    const nextGroup = findGroupInsideGroup(project, group, name);\n    if (nextGroup) {\n      group = nextGroup;\n    } else {\n      return null;\n    }\n  }\n\n  return group ?? null;\n}\n\nexport function ensureGroupRecursively(project: XcodeProject, filepath: string): PBXGroup | null {\n  const components = splitPath(filepath);\n  const hasChild = (group: PBXGroup, name: string) =>\n    group.children.find(({ comment }) => comment === name);\n  const { firstProject } = project.getFirstProject();\n\n  let topMostGroup = project.getPBXGroupByKey(firstProject.mainGroup);\n\n  for (const pathComponent of components) {\n    if (topMostGroup && !hasChild(topMostGroup, pathComponent)) {\n      topMostGroup.children.push({\n        comment: pathComponent,\n        value: project.pbxCreateGroup(pathComponent, '\"\"'),\n      });\n    }\n    topMostGroup = project.pbxGroupByName(pathComponent);\n  }\n  return topMostGroup ?? null;\n}\n\nexport function findSchemeNames(projectRoot: string): string[] {\n  const schemePaths = globSync('ios/*.xcodeproj/xcshareddata/xcschemes/*.xcscheme', {\n    absolute: true,\n    cwd: projectRoot,\n  });\n  return schemePaths.map(schemePath => path.basename(schemePath).split('.')[0]);\n}\n\n/**\n * Get the pbxproj for the given path\n */\nexport function getPbxproj(projectRoot: string): XcodeProject {\n  const pbxprojPaths = globSync('ios/*/project.pbxproj', { absolute: true, cwd: projectRoot });\n  const [pbxprojPath, ...otherPbxprojPaths] = pbxprojPaths;\n\n  if (pbxprojPaths.length > 1) {\n    console.warn(\n      `Found multiple pbxproject files paths, using ${pbxprojPath}. Other paths ${JSON.stringify(\n        otherPbxprojPaths\n      )} ignored.`\n    );\n  }\n\n  const project = xcode.project(pbxprojPath);\n  project.parseSync();\n  return project;\n}\n\nexport function getProjectSection(project: XcodeProject) {\n  return project.pbxProjectSection();\n}\n\nexport function getNativeTargets(project: XcodeProject): NativeTargetSectionEntry[] {\n  const section = project.pbxNativeTargetSection();\n  return Object.entries(section).filter(isNotComment);\n}\n\nexport function findFirstNativeTarget(project: XcodeProject): PBXNativeTarget {\n  const { targets } = Object.values(getProjectSection(project))[0];\n  const target = targets[0].value;\n\n  const nativeTargets = getNativeTargets(project);\n  const nativeTarget = (nativeTargets.find(\n    ([key]) => key === target\n  ) as NativeTargetSectionEntry)[1];\n  return nativeTarget;\n}\n\nexport function getXCConfigurationListEntries(project: XcodeProject): ConfigurationListEntry[] {\n  const lists = project.pbxXCConfigurationList();\n  return Object.entries(lists).filter(isNotComment);\n}\n\nexport function getBuildConfigurationForId(\n  project: XcodeProject,\n  configurationListId: string\n): ConfigurationSectionEntry[] {\n  const configurationListEntries = getXCConfigurationListEntries(project);\n  const [, configurationList] = configurationListEntries.find(\n    ([key]) => key === configurationListId\n  ) as ConfigurationListEntry;\n\n  const buildConfigurations = configurationList.buildConfigurations.map(i => i.value);\n\n  return Object.entries(project.pbxXCBuildConfigurationSection())\n    .filter(isNotComment)\n    .filter(isBuildConfig)\n    .filter(isNotTestHost)\n    .filter(([key]: ConfigurationSectionEntry) => buildConfigurations.includes(key));\n}\n\nexport function isBuildConfig([, sectionItem]: ConfigurationSectionEntry): boolean {\n  return sectionItem.isa === 'XCBuildConfiguration';\n}\n\nexport function isNotTestHost([, sectionItem]: ConfigurationSectionEntry): boolean {\n  return !sectionItem.buildSettings.TEST_HOST;\n}\n\nexport function isNotComment([key]:\n  | ConfigurationSectionEntry\n  | ProjectSectionEntry\n  | ConfigurationListEntry\n  | NativeTargetSectionEntry): boolean {\n  return !key.endsWith(`_comment`);\n}\n"]}