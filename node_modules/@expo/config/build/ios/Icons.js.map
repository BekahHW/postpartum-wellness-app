{"version":3,"file":"Icons.js","sourceRoot":"","sources":["../../src/ios/Icons.ts"],"names":[],"mappings":"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","sourcesContent":["import { generateImageAsync } from '@expo/image-utils';\nimport * as fs from 'fs-extra';\nimport { join } from 'path';\n\nimport { ExpoConfig } from '../Config.types';\nimport { addWarningIOS } from '../WarningAggregator';\nimport { getProjectName } from './utils/Xcodeproj';\n\ntype ContentsJsonImageIdiom = 'iphone' | 'ipad' | 'ios-marketing';\ninterface ContentsJsonImage {\n  idiom: ContentsJsonImageIdiom;\n  size: string;\n  scale: string;\n  filename: string;\n}\n\ninterface ContentsJson {\n  images: ContentsJsonImage[];\n  info: {\n    version: number;\n    author: string;\n  };\n}\n\nconst IMAGE_CACHE_NAME = 'icons';\nconst IMAGESET_PATH = 'Images.xcassets/AppIcon.appiconset';\nconst CONTENTS_PATH = `${IMAGESET_PATH}/Contents.json`;\n\n// Hard-coding seemed like the clearest and safest way to implement the sizes.\nexport const ICON_CONTENTS: {\n  idiom: ContentsJsonImageIdiom;\n  sizes: { size: number; scales: number[] }[];\n}[] = [\n  {\n    idiom: 'iphone',\n    sizes: [\n      {\n        size: 20,\n        scales: [2, 3],\n      },\n      {\n        size: 29,\n        scales: [1, 2, 3],\n      },\n      {\n        size: 40,\n        scales: [2, 3],\n      },\n      {\n        size: 60,\n        scales: [2, 3],\n      },\n      // TODO: 76x76@2x seems unused now\n      // {\n      //   size: 76,\n      //   scales: [2],\n      // },\n    ],\n  },\n  {\n    idiom: 'ipad',\n    sizes: [\n      {\n        size: 20,\n        scales: [1, 2],\n      },\n      {\n        size: 29,\n        scales: [1, 2],\n      },\n      {\n        size: 40,\n        scales: [1, 2],\n      },\n      {\n        size: 76,\n        scales: [1, 2],\n      },\n      {\n        size: 83.5,\n        scales: [2],\n      },\n    ],\n  },\n  {\n    idiom: 'ios-marketing',\n    sizes: [\n      {\n        size: 1024,\n        scales: [1],\n      },\n    ],\n  },\n];\n\nexport function getIcons(config: Pick<ExpoConfig, 'icon' | 'ios'>): string | null {\n  // No support for empty strings.\n  return config.ios?.icon || config.icon || null;\n}\n\nexport async function setIconsAsync(config: ExpoConfig, projectRoot: string) {\n  const icon = getIcons(config);\n  if (!icon) {\n    addWarningIOS(\n      'icon',\n      'This is the image that your app uses on your home screen, you will need to configure it manually.'\n    );\n    return;\n  }\n\n  // Something like projectRoot/ios/MyApp/\n  const iosNamedProjectRoot = getIosNamedProjectPath(projectRoot);\n\n  // Ensure the Images.xcassets/AppIcon.appiconset path exists\n  await fs.ensureDir(join(iosNamedProjectRoot, IMAGESET_PATH));\n\n  // Store the image JSON data for assigning via the Contents.json\n  const imagesJson: ContentsJson['images'] = [];\n\n  // keep track of icons that have been generated so we can reuse them in the Contents.json\n  const generatedIcons: Record<string, boolean> = {};\n\n  for (const platform of ICON_CONTENTS) {\n    const isMarketing = platform.idiom === 'ios-marketing';\n    for (const { size, scales } of platform.sizes) {\n      for (const scale of scales) {\n        // The marketing icon is special because it makes no sense.\n        const filename = isMarketing ? 'ItunesArtwork@2x.png' : getAppleIconName(size, scale);\n        // Only create an image that hasn't already been generated.\n        if (!(filename in generatedIcons)) {\n          const iconSizePx = size * scale;\n\n          // Using this method will cache the images in `.expo` based on the properties used to generate them.\n          // this method also supports remote URLs and using the global sharp instance.\n          const { source } = await generateImageAsync(\n            { projectRoot, cacheType: IMAGE_CACHE_NAME },\n            {\n              src: icon,\n              name: filename,\n              width: iconSizePx,\n              height: iconSizePx,\n              removeTransparency: true,\n              // The icon should be square, but if it's not then it will be cropped.\n              resizeMode: 'cover',\n              // Force the background color to solid white to prevent any transparency.\n              // TODO: Maybe use a more adaptive option based on the icon color?\n              backgroundColor: '#ffffff',\n            }\n          );\n          // Write image buffer to the file system.\n          const assetPath = join(iosNamedProjectRoot, IMAGESET_PATH, filename);\n          await fs.writeFile(assetPath, source);\n          // Save a reference to the generated image so we don't create a duplicate.\n          generatedIcons[filename] = true;\n        }\n        imagesJson.push({\n          idiom: platform.idiom,\n          size: `${size}x${size}`,\n          scale: `${scale}x`,\n          filename,\n        });\n      }\n    }\n  }\n\n  // Finally, write the Config.json\n  await writeContentsJsonAsync(iosNamedProjectRoot, { images: imagesJson });\n}\n\n/**\n * Return the project's named iOS path: ios/MyProject/\n *\n * @param projectRoot Expo project root path.\n */\nfunction getIosNamedProjectPath(projectRoot: string): string {\n  const projectName = getProjectName(projectRoot);\n  return join(projectRoot, 'ios', projectName);\n}\n\n/**\n * Writes the Config.json which is used to assign images to their respective platform, dpi, and idiom.\n *\n * @param iosNamedProjectRoot named iOS project path\n * @param contents image json data\n */\nasync function writeContentsJsonAsync(\n  iosNamedProjectRoot: string,\n  { images }: Pick<ContentsJson, 'images'>\n): Promise<void> {\n  await fs.writeFile(\n    join(iosNamedProjectRoot, CONTENTS_PATH),\n    JSON.stringify(\n      {\n        images,\n        info: {\n          version: 1,\n          // common practice is for the tool that generated the icons to be the \"author\"\n          author: 'expo',\n        },\n      },\n      null,\n      2\n    )\n  );\n}\n\nfunction getAppleIconName(size: number, scale: number): string {\n  return `App-Icon-${size}x${size}@${scale}x.png`;\n}\n"]}