{"version":3,"file":"DeviceFamily.js","sourceRoot":"","sources":["../../src/ios/DeviceFamily.ts"],"names":[],"mappings":";;;;;;;;;AAAA,6CAA+B;AAG/B,iDAA+C;AAE/C,SAAgB,iBAAiB,CAAC,MAAkB;;IAClD,UAAI,MAAM,CAAC,GAAG,0CAAE,cAAc,EAAE;QAC9B,OAAO,CAAC,QAAC,MAAM,CAAC,GAAG,0CAAE,cAAc,CAAA,CAAC;KACrC;IAED,OAAO,KAAK,CAAC;AACf,CAAC;AAND,8CAMC;AAED,SAAgB,eAAe,CAAC,MAAkB;;IAChD,UAAI,MAAM,CAAC,GAAG,0CAAE,YAAY,EAAE;QAC5B,OAAO,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,YAAY,CAAC;KAClC;IAED,OAAO,KAAK,CAAC;AACf,CAAC;AAND,0CAMC;AAED,SAAgB,iBAAiB,CAAC,MAAkB;IAClD,MAAM,cAAc,GAAG,iBAAiB,CAAC,MAAM,CAAC,CAAC;IACjD,MAAM,YAAY,GAAG,eAAe,CAAC,MAAM,CAAC,CAAC;IAE7C,yBAAyB;IACzB,IAAI,YAAY,EAAE;QAChB,OAAO,CAAC,CAAC,CAAC,CAAC;KACZ;SAAM,IAAI,cAAc,EAAE;QACzB,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;KACf;SAAM;QACL,OAAO,CAAC,CAAC,CAAC,CAAC;KACZ;AACH,CAAC;AAZD,8CAYC;AAED;;;;;GAKG;AACH,SAAgB,oBAAoB,CAAC,cAAwB;IAC3D,OAAO,cAAc,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,cAAc,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC;AAC3F,CAAC;AAFD,oDAEC;AAED;;GAEG;AACH,SAAgB,eAAe,CAAC,MAAkB,EAAE,WAAmB;IACrE,MAAM,cAAc,GAAG,oBAAoB,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC,CAAC;IAEvE,MAAM,OAAO,GAAG,sBAAU,CAAC,WAAW,CAAC,CAAC;IACxC,MAAM,cAAc,GAAG,OAAO,CAAC,8BAA8B,EAAE,CAAC;IAChE,aAAa;IACb,KAAK,MAAM,EAAE,aAAa,EAAE,IAAI,MAAM,CAAC,MAAM,CAAC,cAAc,IAAI,EAAE,CAAC,EAAE;QACnE,uDAAuD;QACvD,gEAAgE;QAChE,IAAI,QAAO,aAAa,aAAb,aAAa,uBAAb,aAAa,CAAE,YAAY,CAAA,KAAK,WAAW,EAAE;YACtD,aAAa,CAAC,sBAAsB,GAAG,cAAc,CAAC;SACvD;KACF;IAED,EAAE,CAAC,aAAa,CAAC,OAAO,CAAC,QAAQ,EAAE,OAAO,CAAC,SAAS,EAAE,CAAC,CAAC;AAC1D,CAAC;AAfD,0CAeC","sourcesContent":["import * as fs from 'fs-extra';\n\nimport { ExpoConfig } from '../Config.types';\nimport { getPbxproj } from './utils/Xcodeproj';\n\nexport function getSupportsTablet(config: ExpoConfig): boolean {\n  if (config.ios?.supportsTablet) {\n    return !!config.ios?.supportsTablet;\n  }\n\n  return false;\n}\n\nexport function getIsTabletOnly(config: ExpoConfig): boolean {\n  if (config.ios?.isTabletOnly) {\n    return !!config.ios.isTabletOnly;\n  }\n\n  return false;\n}\n\nexport function getDeviceFamilies(config: ExpoConfig): number[] {\n  const supportsTablet = getSupportsTablet(config);\n  const isTabletOnly = getIsTabletOnly(config);\n\n  // 1 is iPhone, 2 is iPad\n  if (isTabletOnly) {\n    return [2];\n  } else if (supportsTablet) {\n    return [1, 2];\n  } else {\n    return [1];\n  }\n}\n\n/**\n * Wrapping the families in double quotes is the only way to set a value with a comma in it.\n * Use a number when only value is returned, this better emulates Xcode.\n *\n * @param deviceFamilies\n */\nexport function formatDeviceFamilies(deviceFamilies: number[]): string | number {\n  return deviceFamilies.length === 1 ? deviceFamilies[0] : `\"${deviceFamilies.join(',')}\"`;\n}\n\n/**\n * Add to pbxproj under TARGETED_DEVICE_FAMILY\n */\nexport function setDeviceFamily(config: ExpoConfig, projectRoot: string) {\n  const deviceFamilies = formatDeviceFamilies(getDeviceFamilies(config));\n\n  const project = getPbxproj(projectRoot);\n  const configurations = project.pbxXCBuildConfigurationSection();\n  // @ts-ignore\n  for (const { buildSettings } of Object.values(configurations || {})) {\n    // Guessing that this is the best way to emulate Xcode.\n    // Using `project.addToBuildSettings` modifies too many targets.\n    if (typeof buildSettings?.PRODUCT_NAME !== 'undefined') {\n      buildSettings.TARGETED_DEVICE_FAMILY = deviceFamilies;\n    }\n  }\n\n  fs.writeFileSync(project.filepath, project.writeSync());\n}\n"]}