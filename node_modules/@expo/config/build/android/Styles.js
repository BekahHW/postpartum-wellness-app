"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const xml2js_1 = require("xml2js");
const Manifest_1 = require("./Manifest");
async function getProjectStylesXMLPathAsync(projectDir, { kind = 'values' } = {}) {
    return Manifest_1.getProjectXMLPathAsync(projectDir, { kind, name: 'styles' });
}
exports.getProjectStylesXMLPathAsync = getProjectStylesXMLPathAsync;
async function writeStylesXMLAsync(options) {
    const stylesXml = new xml2js_1.Builder().buildObject(options.xml);
    await fs_extra_1.default.ensureDir(path_1.default.dirname(options.path));
    await fs_extra_1.default.writeFile(options.path, stylesXml);
}
exports.writeStylesXMLAsync = writeStylesXMLAsync;
function buildItem({ name, parent, value, }) {
    const item = { _: value, $: { name } };
    if (parent) {
        item['$'].parent = parent;
    }
    return item;
}
exports.buildItem = buildItem;
function ensureStyleShape(xml) {
    if (!xml) {
        xml = {};
    }
    if (!xml.resources) {
        xml.resources = {};
    }
    if (!Array.isArray(xml.resources.style)) {
        xml.resources.style = [];
    }
    return xml;
}
function buildParent(parent) {
    var _a;
    return {
        $: { name: parent.name, parent: parent.parent },
        item: (_a = parent.items) !== null && _a !== void 0 ? _a : [],
    };
}
function getStyleParent(xml, parent) {
    var _a, _b, _c;
    const app = (_c = (_b = (_a = xml.resources.style).filter) === null || _b === void 0 ? void 0 : _b.call(_a, (e) => {
        let matches = e['$']['name'] === parent.name;
        if (parent.parent != null && matches) {
            matches = e['$']['parent'] === parent.parent;
        }
        return matches;
    })) === null || _c === void 0 ? void 0 : _c[0];
    return app !== null && app !== void 0 ? app : null;
}
exports.getStyleParent = getStyleParent;
function setStylesItem({ item, xml, parent, }) {
    xml = ensureStyleShape(xml);
    let appTheme = getStyleParent(xml, parent);
    if (!appTheme) {
        appTheme = buildParent(parent);
        xml.resources.style.push(appTheme);
    }
    if (appTheme.item) {
        const existingItem = appTheme.item.filter((_item) => _item['$'].name === item[0].$.name)[0];
        // Don't want to 2 of the same item, so if one exists, we overwrite it
        if (existingItem) {
            existingItem['_'] = item[0]['_'];
        }
        else {
            appTheme.item = appTheme.item.concat(item);
        }
    }
    else {
        appTheme.item = item;
    }
    return xml;
}
exports.setStylesItem = setStylesItem;
//# sourceMappingURL=Styles.js.map