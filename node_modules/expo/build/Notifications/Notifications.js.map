{"version":3,"file":"Notifications.js","sourceRoot":"","sources":["../../src/Notifications/Notifications.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,qBAAqB,EAAE,mBAAmB,EAAE,MAAM,kBAAkB,CAAC;AAC1F,OAAO,SAAS,MAAM,gBAAgB,CAAC;AACvC,OAAO,EAAE,YAAY,EAAqB,MAAM,WAAW,CAAC;AAC5D,OAAO,SAAS,MAAM,WAAW,CAAC;AAClC,OAAO,EAAE,QAAQ,EAAE,MAAM,cAAc,CAAC;AAExC,OAAO,qBAAqB,MAAM,yBAAyB,CAAC;AAQ5D,OAAO,OAAO,MAAM,WAAW,CAAC;AAEhC,IAAI,QAAQ,CAAC;AACb,IAAI,oBAAoB,CAAC;AAEzB,SAAS,iBAAiB;IACxB,IAAI,CAAC,QAAQ,EAAE;QACb,QAAQ,GAAG,IAAI,YAAY,EAAE,CAAC;QAC9B,qBAAqB,CAAC,WAAW,CAAC,uBAAuB,EAAE,gBAAgB,CAAC,CAAC;KAC9E;AACH,CAAC;AAED,MAAM,UAAU,gBAAgB,CAAC,YAAY;IAC3C,IAAI,OAAO,YAAY,KAAK,QAAQ,EAAE;QACpC,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;KACzC;IAED,4CAA4C;IAC5C,YAAY,GAAG,EAAE,GAAG,YAAY,EAAE,CAAC;IAEnC,IAAI,OAAO,YAAY,CAAC,IAAI,KAAK,QAAQ,EAAE;QACzC,IAAI;YACF,YAAY,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;SACnD;QAAC,OAAO,CAAC,EAAE;YACV,2CAA2C;SAC5C;KACF;IAED,QAAQ,CAAC,IAAI,CAAC,cAAc,EAAE,YAAY,CAAC,CAAC;AAC9C,CAAC;AAED,SAAS,oBAAoB,CAAC,YAAY;IACxC,YAAY,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,YAAY,CAAC,CAAC;IAE/C,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE;QACtB,YAAY,CAAC,IAAI,GAAG,EAAE,CAAC;KACxB;IAED,IAAI,YAAY,CAAC,cAAc,CAAC,OAAO,CAAC,EAAE;QACxC,OAAO,YAAY,CAAC,KAAK,CAAC;KAC3B;IAED,gGAAgG;IAChG,IAAI,QAAQ,CAAC,EAAE,KAAK,KAAK,EAAE;QACzB,IAAI,YAAY,CAAC,OAAO,EAAE;YACxB,OAAO,YAAY,CAAC,OAAO,CAAC;SAC7B;QAED,IAAI,YAAY,CAAC,GAAG,EAAE;YACpB,YAAY,GAAG,MAAM,CAAC,MAAM,CAAC,YAAY,EAAE,YAAY,CAAC,GAAG,CAAC,CAAC;YAC7D,YAAY,CAAC,IAAI,CAAC,oBAAoB,GAAG,YAAY,CAAC,GAAG,CAAC,oBAAoB,CAAC;YAC/E,OAAO,YAAY,CAAC,GAAG,CAAC;SACzB;KACF;IAED,6FAA6F;IAC7F,SAAS;IACT,IAAI,QAAQ,CAAC,EAAE,KAAK,SAAS,EAAE;QAC7B,IAAI,YAAY,CAAC,GAAG,EAAE;YACpB,OAAO,YAAY,CAAC,GAAG,CAAC;SACzB;QAED,IAAI,YAAY,CAAC,OAAO,EAAE;YACxB,YAAY,GAAG,MAAM,CAAC,MAAM,CAAC,YAAY,EAAE,YAAY,CAAC,OAAO,CAAC,CAAC;YACjE,OAAO,YAAY,CAAC,OAAO,CAAC;SAC7B;KACF;IAED,OAAO,YAAY,CAAC;AACtB,CAAC;AAED,SAAS,qBAAqB,CAAC,YAAY;IACzC,IAAI,QAAQ,CAAC,EAAE,KAAK,KAAK,EAAE;QACzB,SAAS,CACP,CAAC,CAAC,YAAY,CAAC,KAAK,IAAI,CAAC,CAAC,YAAY,CAAC,IAAI,EAC3C,4DAA4D,CAC7D,CAAC;KACH;SAAM,IAAI,QAAQ,CAAC,EAAE,KAAK,SAAS,EAAE;QACpC,SAAS,CAAC,CAAC,CAAC,YAAY,CAAC,KAAK,EAAE,gDAAgD,CAAC,CAAC;KACnF;AACH,CAAC;AAED,MAAM,oBAAoB,GAAG,0BAA0B,CAAC;AACxD,qCAAqC;AACrC,yCAAyC;AACzC,MAAM,mBAAmB,GACvB,qBAAqB,IAAI,OAAO,qBAAqB,CAAC,aAAa,KAAK,UAAU,CAAC;AAErF,KAAK,UAAU,kBAAkB,CAAC,EAAU;IAC1C,IAAI;QACF,MAAM,aAAa,GAAG,MAAM,OAAO,CAAC,OAAO,CAAC,GAAG,oBAAoB,GAAG,EAAE,EAAE,CAAC,CAAC;QAC5E,IAAI,aAAa,EAAE;YACjB,OAAO,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;SAClC;KACF;IAAC,OAAO,CAAC,EAAE,GAAE;IACd,OAAO,IAAI,CAAC;AACd,CAAC;AAED,SAAS,oBAAoB,CAAC,EAAU;IACtC,OAAO,OAAO,CAAC,UAAU,CAAC,GAAG,oBAAoB,GAAG,EAAE,EAAE,CAAC,CAAC;AAC5D,CAAC;AAED,IAAI,QAAQ,CAAC,EAAE,KAAK,SAAS,EAAE;IAC7B,OAAO,CAAC,KAAK,GAAG,KAAK,WAAU,QAAkC;QAC/D,IAAI;YACF,MAAM,IAAI,GAAG,MAAM,OAAO,CAAC,UAAU,EAAE,CAAC;YACxC,IAAI,IAAI,IAAI,IAAI,CAAC,MAAM,EAAE;gBACvB,MAAM,YAAY,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,oBAAoB,CAAC,CAAC,CAAC;gBAC/E,MAAM,OAAO,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC;aACzC;YACD,QAAQ,IAAI,QAAQ,EAAE,CAAC;SACxB;QAAC,OAAO,CAAC,EAAE;YACV,QAAQ,IAAI,QAAQ,CAAC,CAAC,CAAC,CAAC;YACxB,MAAM,CAAC,CAAC;SACT;IACH,CAAC,CAAC;CACH;AAED,4DAA4D;AAC5D,gCAAgC;AAChC,SAAS,kBAAkB,CAAC,EAAU,EAAE,OAAgB;IACtD,OAAO,OAAO,CAAC,OAAO,CAAC,GAAG,oBAAoB,GAAG,EAAE,EAAE,EAAE,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC;AAClF,CAAC;AAED,eAAe;IACb,8EAA8E;IAC9E,uBAAuB,CAAC,YAA0B;QAChD,oBAAoB,GAAG,YAAY,CAAC;IACtC,CAAC;IAED,qCAAqC;IACrC,mBAAmB,CACjB,UAAkB,EAClB,OAAqB,EACrB,kBAA2B;QAE3B,OAAO,QAAQ,CAAC,EAAE,KAAK,KAAK;YAC1B,CAAC,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,UAAU,EAAE,OAAO,EAAE,kBAAkB,CAAC;YACpF,CAAC,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;IACrE,CAAC;IAED,mBAAmB,CAAC,UAAkB;QACpC,OAAO,qBAAqB,CAAC,mBAAmB,CAAC,UAAU,CAAC,CAAC;IAC/D,CAAC;IAED,eAAe;IACf,qBAAqB;QACnB,IAAI,CAAC,qBAAqB,CAAC,yBAAyB,EAAE;YACpD,MAAM,IAAI,mBAAmB,CAAC,oBAAoB,EAAE,uBAAuB,CAAC,CAAC;SAC9E;QACD,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE;YACvB,MAAM,IAAI,KAAK,CAAC,wDAAwD,CAAC,CAAC;SAC3E;QACD,OAAO,qBAAqB,CAAC,yBAAyB,EAAE,CAAC;IAC3D,CAAC;IAED,uBAAuB,EAAE,CAAC,MAEzB,EAA2C,EAAE;QAC5C,IAAI,CAAC,qBAAqB,CAAC,uBAAuB,EAAE;YAClD,MAAM,IAAI,mBAAmB,CAAC,oBAAoB,EAAE,yBAAyB,CAAC,CAAC;SAChF;QACD,OAAO,qBAAqB,CAAC,uBAAuB,CAAC,MAAM,IAAI,EAAE,CAAC,CAAC;IACrE,CAAC;IAED,yBAAyB,CAAC,EAAU,EAAE,OAAgB;QACpD,IAAI,QAAQ,CAAC,EAAE,KAAK,SAAS,EAAE;YAC7B,OAAO,CAAC,IAAI,CAAC,mDAAmD,QAAQ,CAAC,EAAE,EAAE,CAAC,CAAC;YAC/E,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;SAC1B;QACD,4DAA4D;QAC5D,gCAAgC;QAChC,IAAI,CAAC,mBAAmB,EAAE;YACxB,OAAO,kBAAkB,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;SACxC;QACD,OAAO,qBAAqB,CAAC,aAAa,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;IAC1D,CAAC;IAED,yBAAyB,CAAC,EAAU;QAClC,IAAI,QAAQ,CAAC,EAAE,KAAK,SAAS,EAAE;YAC7B,OAAO,CAAC,IAAI,CAAC,mDAAmD,QAAQ,CAAC,EAAE,EAAE,CAAC,CAAC;YAC/E,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;SAC1B;QACD,4DAA4D;QAC5D,gCAAgC;QAChC,IAAI,CAAC,mBAAmB,EAAE;YACxB,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;SAC1B;QACD,OAAO,qBAAqB,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC;IACjD,CAAC;IAED,oCAAoC;IACpC,KAAK,CAAC,6BAA6B,CACjC,YAA+B;QAE/B,qBAAqB,CAAC,YAAY,CAAC,CAAC;QACpC,MAAM,kBAAkB,GAAG,oBAAoB,CAAC,YAAY,CAAC,CAAC;QAE9D,IAAI,QAAQ,CAAC,EAAE,KAAK,SAAS,EAAE;YAC7B,OAAO,MAAM,qBAAqB,CAAC,wBAAwB,CAAC,kBAAkB,CAAC,CAAC;SACjF;aAAM;YACL,IAAI,QAAQ,CAAC;YACb,IAAI,kBAAkB,CAAC,SAAS,EAAE;gBAChC,QAAQ,GAAG,MAAM,kBAAkB,CAAC,kBAAkB,CAAC,SAAS,CAAC,CAAC;aACnE;YAED,IAAI,mBAAmB,EAAE;gBACvB,uFAAuF;gBACvF,oBAAoB,CAAC,kBAAkB,CAAC,SAAS,CAAC,CAAC;gBACnD,OAAO,qBAAqB,CAAC,mCAAmC,CAC9D,kBAAkB,EAClB,QAAQ,CACT,CAAC;aACH;iBAAM;gBACL,qFAAqF;gBACrF,sFAAsF;gBACtF,IAAI,QAAQ,EAAE;oBACZ,kBAAkB,CAAC,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC;oBAC1C,kBAAkB,CAAC,QAAQ,GAAG,QAAQ,CAAC,QAAQ,CAAC;oBAChD,kBAAkB,CAAC,OAAO,GAAG,QAAQ,CAAC,OAAO,CAAC;iBAC/C;gBACD,OAAO,qBAAqB,CAAC,wBAAwB,CAAC,kBAAkB,CAAC,CAAC;aAC3E;SACF;IACH,CAAC;IAED,6CAA6C;IAC7C,KAAK,CAAC,8BAA8B,CAClC,YAA+B,EAC/B,UAII,EAAE;QAEN,+FAA+F;QAC/F,wBAAwB;QACxB,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QAEvB,6CAA6C;QAC7C,qBAAqB,CAAC,YAAY,CAAC,CAAC;QACpC,MAAM,kBAAkB,GAAG,oBAAoB,CAAC,YAAY,CAAC,CAAC;QAE9D,0BAA0B;QAC1B,IAAI,OAAO,CAAC,IAAI,EAAE;YAChB,IAAI,aAAa,GAAgB,IAAI,CAAC;YACtC,IAAI,OAAO,CAAC,IAAI,IAAI,OAAO,OAAO,CAAC,IAAI,KAAK,QAAQ,EAAE;gBACpD,aAAa,GAAG,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;gBACvC,IAAI,aAAa,CAAC,QAAQ,EAAE,KAAK,cAAc,EAAE;oBAC/C,aAAa,GAAG,IAAI,CAAC;iBACtB;aACF;iBAAM,IAAI,OAAO,CAAC,IAAI,IAAI,OAAO,CAAC,IAAI,YAAY,IAAI,EAAE;gBACvD,aAAa,GAAG,OAAO,CAAC,IAAI,CAAC;aAC9B;YAED,kDAAkD;YAClD,IAAI,CAAC,aAAa,EAAE;gBAClB,MAAM,IAAI,KAAK,CACb,qJAAqJ,CACtJ,CAAC;aACH;YAED,2FAA2F;YAC3F,6DAA6D;YAC7D,IAAI,aAAa,CAAC,OAAO,EAAE,GAAG,GAAG,EAAE;gBACjC,OAAO,CAAC,IAAI,CACV,mJAAmJ,CACpJ,CAAC;aACH;YAED,OAAO,GAAG;gBACR,GAAG,OAAO;gBACV,IAAI,EAAE,aAAa,CAAC,OAAO,EAAE;aAC9B,CAAC;SACH;QAED,IAAI,OAAO,CAAC,UAAU,IAAI,IAAI,IAAI,OAAO,CAAC,MAAM,IAAI,IAAI,EAAE;YACxD,MAAM,IAAI,KAAK,CAAC,kEAAkE,CAAC,CAAC;SACrF;QAED,0BAA0B;QAC1B,IAAI,OAAO,CAAC,MAAM,IAAI,IAAI,EAAE;YAC1B,MAAM,YAAY,GAAG,IAAI,GAAG,CAAC,CAAC,QAAQ,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC,CAAC;YACjF,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;gBACrC,MAAM,IAAI,KAAK,CACb,qGAAqG,CACtG,CAAC;aACH;SACF;QAED,IAAI,OAAO,CAAC,UAAU,IAAI,IAAI,EAAE;YAC9B,IAAI,QAAQ,CAAC,EAAE,KAAK,KAAK,EAAE;gBACzB,MAAM,IAAI,KAAK,CAAC,iDAAiD,CAAC,CAAC;aACpE;YAED,IAAI,OAAO,CAAC,UAAU,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE;gBACpE,MAAM,IAAI,KAAK,CACb,4EAA4E,CAC7E,CAAC;aACH;SACF;QAED,IAAI,QAAQ,CAAC,EAAE,KAAK,SAAS,EAAE;YAC7B,IAAI,OAAO,CAAC,MAAM,EAAE;gBAClB,OAAO,CAAC,IAAI,CACV,8HAA8H,CAC/H,CAAC;gBACF,OAAO,qBAAqB,CAAC,wCAAwC,CACnE,kBAAkB,EAClB,OAAO,CACR,CAAC;aACH;YAED,OAAO,qBAAqB,CAAC,yBAAyB,CAAC,kBAAkB,EAAE,OAAO,CAAC,CAAC;SACrF;aAAM;YACL,IAAI,QAAQ,CAAC;YACb,IAAI,kBAAkB,CAAC,SAAS,EAAE;gBAChC,QAAQ,GAAG,MAAM,kBAAkB,CAAC,kBAAkB,CAAC,SAAS,CAAC,CAAC;aACnE;YAED,IAAI,mBAAmB,EAAE;gBACvB,uFAAuF;gBACvF,oBAAoB,CAAC,kBAAkB,CAAC,SAAS,CAAC,CAAC;gBACnD,OAAO,qBAAqB,CAAC,oCAAoC,CAC/D,kBAAkB,EAClB,OAAO,EACP,QAAQ,CACT,CAAC;aACH;iBAAM;gBACL,qFAAqF;gBACrF,sFAAsF;gBACtF,IAAI,QAAQ,EAAE;oBACZ,kBAAkB,CAAC,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC;oBAC1C,kBAAkB,CAAC,QAAQ,GAAG,QAAQ,CAAC,QAAQ,CAAC;oBAChD,kBAAkB,CAAC,OAAO,GAAG,QAAQ,CAAC,OAAO,CAAC;iBAC/C;gBACD,OAAO,qBAAqB,CAAC,yBAAyB,CAAC,kBAAkB,EAAE,OAAO,CAAC,CAAC;aACrF;SACF;IACH,CAAC;IAED,iEAAiE;IACjE,KAAK,CAAC,wBAAwB,CAAC,cAAmC;QAChE,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,EAAE;YAC9C,MAAM,IAAI,mBAAmB,CAAC,oBAAoB,EAAE,qBAAqB,CAAC,CAAC;SAC5E;QACD,OAAO,MAAM,qBAAqB,CAAC,mBAAmB,CAAC,cAAc,CAAC,CAAC;IACzE,CAAC;IAED,8DAA8D;IAC9D,KAAK,CAAC,4BAA4B;QAChC,IAAI,CAAC,qBAAqB,CAAC,uBAAuB,EAAE;YAClD,MAAM,IAAI,mBAAmB,CAAC,oBAAoB,EAAE,yBAAyB,CAAC,CAAC;SAChF;QACD,OAAO,MAAM,qBAAqB,CAAC,uBAAuB,EAAE,CAAC;IAC/D,CAAC;IAED,wDAAwD;IACxD,gCAAgC,CAAC,cAAmC;QAClE,IAAI,QAAQ,CAAC,EAAE,KAAK,SAAS,IAAI,OAAO,cAAc,KAAK,QAAQ,EAAE;YACnE,OAAO,qBAAqB,CAAC,4CAA4C,CAAC,cAAc,CAAC,CAAC;SAC3F;QACD,OAAO,qBAAqB,CAAC,gCAAgC,CAAC,cAAc,CAAC,CAAC;IAChF,CAAC;IAED,wCAAwC;IACxC,oCAAoC;QAClC,OAAO,qBAAqB,CAAC,oCAAoC,EAAE,CAAC;IACtE,CAAC;IAED,wBAAwB;IACxB,WAAW,CAAC,QAAiD;QAC3D,iBAAiB,EAAE,CAAC;QAEpB,IAAI,oBAAoB,EAAE;YACxB,MAAM,mBAAmB,GAAG,oBAAoB,CAAC;YACjD,oBAAoB,GAAG,IAAI,CAAC;YAC5B,UAAU,CAAC,GAAG,EAAE;gBACd,gBAAgB,CAAC,mBAAmB,CAAC,CAAC;YACxC,CAAC,EAAE,CAAC,CAAC,CAAC;SACP;QAED,OAAO,QAAQ,CAAC,WAAW,CAAC,cAAc,EAAE,QAAQ,CAAC,CAAC;IACxD,CAAC;IAED,KAAK,CAAC,mBAAmB;QACvB,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,EAAE;YAC9C,OAAO,CAAC,CAAC;SACV;QACD,OAAO,qBAAqB,CAAC,mBAAmB,EAAE,CAAC;IACrD,CAAC;IAED,KAAK,CAAC,mBAAmB,CAAC,MAAc;QACtC,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,EAAE;YAC9C,MAAM,IAAI,mBAAmB,CAAC,oBAAoB,EAAE,qBAAqB,CAAC,CAAC;SAC5E;QACD,OAAO,qBAAqB,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC;IAC3D,CAAC;IAED,KAAK,CAAC,qCAAqC,CACzC,YAA+B,EAC/B,UASI,EAAE;QAEN,MAAM,eAAe,GACnB,CAAC,OAAO,CAAC,KAAK,IAAI,IAAI,IAAI,kBAAkB,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;YACnE,CAAC,OAAO,CAAC,GAAG,IAAI,IAAI,IAAI,kBAAkB,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;YAC/D,CAAC,OAAO,CAAC,IAAI,IAAI,IAAI,IAAI,kBAAkB,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;YACjE,CAAC,OAAO,CAAC,MAAM,IAAI,IAAI,IAAI,kBAAkB,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;YACrE,CAAC,OAAO,CAAC,MAAM,IAAI,IAAI,IAAI,kBAAkB,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;YACrE,CAAC,OAAO,CAAC,OAAO,IAAI,IAAI,IAAI,kBAAkB,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YACtE,CAAC,OAAO,CAAC,OAAO,IAAI,IAAI,IAAI,OAAO,CAAC,GAAG,IAAI,IAAI,CAAC,CAAC;QAEnD,IAAI,CAAC,eAAe,EAAE;YACpB,MAAM,IAAI,UAAU,CAClB,eAAe,EACf,uEAAuE,CACxE,CAAC;SACH;QAED,qBAAqB,CAAC,YAAY,CAAC,CAAC;QACpC,MAAM,kBAAkB,GAAG,oBAAoB,CAAC,YAAY,CAAC,CAAC;QAE9D,OAAO,qBAAqB,CAAC,gCAAgC,CAAC,kBAAkB,EAAE,OAAO,CAAC,CAAC;IAC7F,CAAC;IAED,KAAK,CAAC,kCAAkC,CACtC,YAA+B,EAC/B,OAGC;QAED,IAAI,OAAO,CAAC,QAAQ,GAAG,CAAC,EAAE;YACxB,MAAM,IAAI,UAAU,CAAC,eAAe,EAAE,kCAAkC,CAAC,CAAC;SAC3E;QAED,qBAAqB,CAAC,YAAY,CAAC,CAAC;QACpC,MAAM,kBAAkB,GAAG,oBAAoB,CAAC,YAAY,CAAC,CAAC;QAE9D,OAAO,qBAAqB,CAAC,6BAA6B,CAAC,kBAAkB,EAAE,OAAO,CAAC,CAAC;IAC1F,CAAC;CACF,CAAC;AAEF,SAAS,kBAAkB,CAAC,QAAgB,EAAE,GAAW,EAAE,GAAW;IACpE,OAAO,QAAQ,IAAI,GAAG,IAAI,QAAQ,IAAI,GAAG,CAAC;AAC5C,CAAC","sourcesContent":["import { CodedError, RCTDeviceEventEmitter, UnavailabilityError } from '@unimodules/core';\nimport Constants from 'expo-constants';\nimport { EventEmitter, EventSubscription } from 'fbemitter';\nimport invariant from 'invariant';\nimport { Platform } from 'react-native';\n\nimport ExponentNotifications from './ExponentNotifications';\nimport {\n  Notification,\n  LocalNotification,\n  Channel,\n  ActionType,\n  LocalNotificationId,\n} from './Notifications.types';\nimport Storage from './Storage';\n\nlet _emitter;\nlet _initialNotification;\n\nfunction _maybeInitEmitter() {\n  if (!_emitter) {\n    _emitter = new EventEmitter();\n    RCTDeviceEventEmitter.addListener('Exponent.notification', emitNotification);\n  }\n}\n\nexport function emitNotification(notification) {\n  if (typeof notification === 'string') {\n    notification = JSON.parse(notification);\n  }\n\n  /* Don't mutate the original notification */\n  notification = { ...notification };\n\n  if (typeof notification.data === 'string') {\n    try {\n      notification.data = JSON.parse(notification.data);\n    } catch (e) {\n      // It's actually just a string, that's fine\n    }\n  }\n\n  _emitter.emit('notification', notification);\n}\n\nfunction _processNotification(notification) {\n  notification = Object.assign({}, notification);\n\n  if (!notification.data) {\n    notification.data = {};\n  }\n\n  if (notification.hasOwnProperty('count')) {\n    delete notification.count;\n  }\n\n  // Delete any Android properties on iOS and merge the iOS properties on root notification object\n  if (Platform.OS === 'ios') {\n    if (notification.android) {\n      delete notification.android;\n    }\n\n    if (notification.ios) {\n      notification = Object.assign(notification, notification.ios);\n      notification.data._displayInForeground = notification.ios._displayInForeground;\n      delete notification.ios;\n    }\n  }\n\n  // Delete any iOS properties on Android and merge the Android properties on root notification\n  // object\n  if (Platform.OS === 'android') {\n    if (notification.ios) {\n      delete notification.ios;\n    }\n\n    if (notification.android) {\n      notification = Object.assign(notification, notification.android);\n      delete notification.android;\n    }\n  }\n\n  return notification;\n}\n\nfunction _validateNotification(notification) {\n  if (Platform.OS === 'ios') {\n    invariant(\n      !!notification.title && !!notification.body,\n      'Local notifications on iOS require both a title and a body'\n    );\n  } else if (Platform.OS === 'android') {\n    invariant(!!notification.title, 'Local notifications on Android require a title');\n  }\n}\n\nconst ASYNC_STORAGE_PREFIX = '__expo_internal_channel_';\n// TODO: remove this before releasing\n// this will always be `true` for SDK 28+\nconst IS_USING_NEW_BINARY =\n  ExponentNotifications && typeof ExponentNotifications.createChannel === 'function';\n\nasync function _legacyReadChannel(id: string): Promise<Channel | null> {\n  try {\n    const channelString = await Storage.getItem(`${ASYNC_STORAGE_PREFIX}${id}`);\n    if (channelString) {\n      return JSON.parse(channelString);\n    }\n  } catch (e) {}\n  return null;\n}\n\nfunction _legacyDeleteChannel(id: string): Promise<void> {\n  return Storage.removeItem(`${ASYNC_STORAGE_PREFIX}${id}`);\n}\n\nif (Platform.OS === 'android') {\n  Storage.clear = async function(callback?: (error?: Error) => void): Promise<void> {\n    try {\n      const keys = await Storage.getAllKeys();\n      if (keys && keys.length) {\n        const filteredKeys = keys.filter(key => !key.startsWith(ASYNC_STORAGE_PREFIX));\n        await Storage.multiRemove(filteredKeys);\n      }\n      callback && callback();\n    } catch (e) {\n      callback && callback(e);\n      throw e;\n    }\n  };\n}\n\n// This codepath will never be triggered in SDK 28 and above\n// TODO: remove before releasing\nfunction _legacySaveChannel(id: string, channel: Channel): Promise<void> {\n  return Storage.setItem(`${ASYNC_STORAGE_PREFIX}${id}`, JSON.stringify(channel));\n}\n\nexport default {\n  /* Only used internally to initialize the notification from top level props */\n  _setInitialNotification(notification: Notification) {\n    _initialNotification = notification;\n  },\n\n  // User passes set of actions titles.\n  createCategoryAsync(\n    categoryId: string,\n    actions: ActionType[],\n    previewPlaceholder?: string\n  ): Promise<void> {\n    return Platform.OS === 'ios'\n      ? ExponentNotifications.createCategoryAsync(categoryId, actions, previewPlaceholder)\n      : ExponentNotifications.createCategoryAsync(categoryId, actions);\n  },\n\n  deleteCategoryAsync(categoryId: string): Promise<void> {\n    return ExponentNotifications.deleteCategoryAsync(categoryId);\n  },\n\n  /* Re-export */\n  getExpoPushTokenAsync(): Promise<string> {\n    if (!ExponentNotifications.getExponentPushTokenAsync) {\n      throw new UnavailabilityError('Expo.Notifications', 'getExpoPushTokenAsync');\n    }\n    if (!Constants.isDevice) {\n      throw new Error(`Must be on a physical device to get an Expo Push Token`);\n    }\n    return ExponentNotifications.getExponentPushTokenAsync();\n  },\n\n  getDevicePushTokenAsync: (config: {\n    gcmSenderId?: string;\n  }): Promise<{ type: string; data: string }> => {\n    if (!ExponentNotifications.getDevicePushTokenAsync) {\n      throw new UnavailabilityError('Expo.Notifications', 'getDevicePushTokenAsync');\n    }\n    return ExponentNotifications.getDevicePushTokenAsync(config || {});\n  },\n\n  createChannelAndroidAsync(id: string, channel: Channel): Promise<void> {\n    if (Platform.OS !== 'android') {\n      console.warn(`createChannelAndroidAsync(...) has no effect on ${Platform.OS}`);\n      return Promise.resolve();\n    }\n    // This codepath will never be triggered in SDK 28 and above\n    // TODO: remove before releasing\n    if (!IS_USING_NEW_BINARY) {\n      return _legacySaveChannel(id, channel);\n    }\n    return ExponentNotifications.createChannel(id, channel);\n  },\n\n  deleteChannelAndroidAsync(id: string): Promise<void> {\n    if (Platform.OS !== 'android') {\n      console.warn(`deleteChannelAndroidAsync(...) has no effect on ${Platform.OS}`);\n      return Promise.resolve();\n    }\n    // This codepath will never be triggered in SDK 28 and above\n    // TODO: remove before releasing\n    if (!IS_USING_NEW_BINARY) {\n      return Promise.resolve();\n    }\n    return ExponentNotifications.deleteChannel(id);\n  },\n\n  /* Shows a notification instantly */\n  async presentLocalNotificationAsync(\n    notification: LocalNotification\n  ): Promise<LocalNotificationId> {\n    _validateNotification(notification);\n    const nativeNotification = _processNotification(notification);\n\n    if (Platform.OS !== 'android') {\n      return await ExponentNotifications.presentLocalNotification(nativeNotification);\n    } else {\n      let _channel;\n      if (nativeNotification.channelId) {\n        _channel = await _legacyReadChannel(nativeNotification.channelId);\n      }\n\n      if (IS_USING_NEW_BINARY) {\n        // delete the legacy channel from AsyncStorage so this codepath isn't triggered anymore\n        _legacyDeleteChannel(nativeNotification.channelId);\n        return ExponentNotifications.presentLocalNotificationWithChannel(\n          nativeNotification,\n          _channel\n        );\n      } else {\n        // TODO: remove this codepath before releasing, it will never be triggered on SDK 28+\n        // channel does not actually exist, so add its settings to the individual notification\n        if (_channel) {\n          nativeNotification.sound = _channel.sound;\n          nativeNotification.priority = _channel.priority;\n          nativeNotification.vibrate = _channel.vibrate;\n        }\n        return ExponentNotifications.presentLocalNotification(nativeNotification);\n      }\n    }\n  },\n\n  /* Schedule a notification at a later date */\n  async scheduleLocalNotificationAsync(\n    notification: LocalNotification,\n    options: {\n      time?: Date | number;\n      repeat?: 'minute' | 'hour' | 'day' | 'week' | 'month' | 'year';\n      intervalMs?: number;\n    } = {}\n  ): Promise<LocalNotificationId> {\n    // set now at the beginning of the method, to prevent potential weird warnings when we validate\n    // options.time later on\n    const now = Date.now();\n\n    // Validate and process the notification data\n    _validateNotification(notification);\n    const nativeNotification = _processNotification(notification);\n\n    // Validate `options.time`\n    if (options.time) {\n      let timeAsDateObj: Date | null = null;\n      if (options.time && typeof options.time === 'number') {\n        timeAsDateObj = new Date(options.time);\n        if (timeAsDateObj.toString() === 'Invalid Date') {\n          timeAsDateObj = null;\n        }\n      } else if (options.time && options.time instanceof Date) {\n        timeAsDateObj = options.time;\n      }\n\n      // If we couldn't convert properly, throw an error\n      if (!timeAsDateObj) {\n        throw new Error(\n          `Provided value for \"time\" is invalid. Please verify that it's either a number representing Unix Epoch time in milliseconds, or a valid date object.`\n        );\n      }\n\n      // If someone passes in a value that is too small, say, by an order of 1000 (it's common to\n      // accidently pass seconds instead of ms), display a warning.\n      if (timeAsDateObj.getTime() < now) {\n        console.warn(\n          `Provided value for \"time\" is before the current date. Did you possibly pass number of seconds since Unix Epoch instead of number of milliseconds?`\n        );\n      }\n\n      options = {\n        ...options,\n        time: timeAsDateObj.getTime(),\n      };\n    }\n\n    if (options.intervalMs != null && options.repeat != null) {\n      throw new Error(`Pass either the \"repeat\" option or \"intervalMs\" option, not both`);\n    }\n\n    // Validate options.repeat\n    if (options.repeat != null) {\n      const validOptions = new Set(['minute', 'hour', 'day', 'week', 'month', 'year']);\n      if (!validOptions.has(options.repeat)) {\n        throw new Error(\n          `Pass one of ['minute', 'hour', 'day', 'week', 'month', 'year'] as the value for the \"repeat\" option`\n        );\n      }\n    }\n\n    if (options.intervalMs != null) {\n      if (Platform.OS === 'ios') {\n        throw new Error(`The \"intervalMs\" option is not supported on iOS`);\n      }\n\n      if (options.intervalMs <= 0 || !Number.isInteger(options.intervalMs)) {\n        throw new Error(\n          `Pass an integer greater than zero as the value for the \"intervalMs\" option`\n        );\n      }\n    }\n\n    if (Platform.OS !== 'android') {\n      if (options.repeat) {\n        console.warn(\n          'Ability to schedule an automatically repeated notification is deprecated on iOS and will be removed in the next SDK release.'\n        );\n        return ExponentNotifications.legacyScheduleLocalRepeatingNotification(\n          nativeNotification,\n          options\n        );\n      }\n\n      return ExponentNotifications.scheduleLocalNotification(nativeNotification, options);\n    } else {\n      let _channel;\n      if (nativeNotification.channelId) {\n        _channel = await _legacyReadChannel(nativeNotification.channelId);\n      }\n\n      if (IS_USING_NEW_BINARY) {\n        // delete the legacy channel from AsyncStorage so this codepath isn't triggered anymore\n        _legacyDeleteChannel(nativeNotification.channelId);\n        return ExponentNotifications.scheduleLocalNotificationWithChannel(\n          nativeNotification,\n          options,\n          _channel\n        );\n      } else {\n        // TODO: remove this codepath before releasing, it will never be triggered on SDK 28+\n        // channel does not actually exist, so add its settings to the individual notification\n        if (_channel) {\n          nativeNotification.sound = _channel.sound;\n          nativeNotification.priority = _channel.priority;\n          nativeNotification.vibrate = _channel.vibrate;\n        }\n        return ExponentNotifications.scheduleLocalNotification(nativeNotification, options);\n      }\n    }\n  },\n\n  /* Dismiss currently shown notification with ID (Android only) */\n  async dismissNotificationAsync(notificationId: LocalNotificationId): Promise<void> {\n    if (!ExponentNotifications.dismissNotification) {\n      throw new UnavailabilityError('Expo.Notifications', 'dismissNotification');\n    }\n    return await ExponentNotifications.dismissNotification(notificationId);\n  },\n\n  /* Dismiss all currently shown notifications (Android only) */\n  async dismissAllNotificationsAsync(): Promise<void> {\n    if (!ExponentNotifications.dismissAllNotifications) {\n      throw new UnavailabilityError('Expo.Notifications', 'dismissAllNotifications');\n    }\n    return await ExponentNotifications.dismissAllNotifications();\n  },\n\n  /* Cancel scheduled notification notification with ID */\n  cancelScheduledNotificationAsync(notificationId: LocalNotificationId): Promise<void> {\n    if (Platform.OS === 'android' && typeof notificationId === 'string') {\n      return ExponentNotifications.cancelScheduledNotificationWithStringIdAsync(notificationId);\n    }\n    return ExponentNotifications.cancelScheduledNotificationAsync(notificationId);\n  },\n\n  /* Cancel all scheduled notifications */\n  cancelAllScheduledNotificationsAsync(): Promise<void> {\n    return ExponentNotifications.cancelAllScheduledNotificationsAsync();\n  },\n\n  /* Primary public api */\n  addListener(listener: (notification: Notification) => unknown): EventSubscription {\n    _maybeInitEmitter();\n\n    if (_initialNotification) {\n      const initialNotification = _initialNotification;\n      _initialNotification = null;\n      setTimeout(() => {\n        emitNotification(initialNotification);\n      }, 0);\n    }\n\n    return _emitter.addListener('notification', listener);\n  },\n\n  async getBadgeNumberAsync(): Promise<number> {\n    if (!ExponentNotifications.getBadgeNumberAsync) {\n      return 0;\n    }\n    return ExponentNotifications.getBadgeNumberAsync();\n  },\n\n  async setBadgeNumberAsync(number: number): Promise<void> {\n    if (!ExponentNotifications.setBadgeNumberAsync) {\n      throw new UnavailabilityError('Expo.Notifications', 'setBadgeNumberAsync');\n    }\n    return ExponentNotifications.setBadgeNumberAsync(number);\n  },\n\n  async scheduleNotificationWithCalendarAsync(\n    notification: LocalNotification,\n    options: {\n      year?: number;\n      month?: number;\n      hour?: number;\n      day?: number;\n      minute?: number;\n      second?: number;\n      weekDay?: number;\n      repeat?: boolean;\n    } = {}\n  ): Promise<string> {\n    const areOptionsValid: boolean =\n      (options.month == null || isInRangeInclusive(options.month, 1, 12)) &&\n      (options.day == null || isInRangeInclusive(options.day, 1, 31)) &&\n      (options.hour == null || isInRangeInclusive(options.hour, 0, 23)) &&\n      (options.minute == null || isInRangeInclusive(options.minute, 0, 59)) &&\n      (options.second == null || isInRangeInclusive(options.second, 0, 59)) &&\n      (options.weekDay == null || isInRangeInclusive(options.weekDay, 1, 7)) &&\n      (options.weekDay == null || options.day == null);\n\n    if (!areOptionsValid) {\n      throw new CodedError(\n        'WRONG_OPTIONS',\n        'Options in scheduleNotificationWithCalendarAsync call were incorrect!'\n      );\n    }\n\n    _validateNotification(notification);\n    const nativeNotification = _processNotification(notification);\n\n    return ExponentNotifications.scheduleNotificationWithCalendar(nativeNotification, options);\n  },\n\n  async scheduleNotificationWithTimerAsync(\n    notification: LocalNotification,\n    options: {\n      interval: number;\n      repeat?: boolean;\n    }\n  ): Promise<string> {\n    if (options.interval < 1) {\n      throw new CodedError('WRONG_OPTIONS', 'Interval must be not less then 1');\n    }\n\n    _validateNotification(notification);\n    const nativeNotification = _processNotification(notification);\n\n    return ExponentNotifications.scheduleNotificationWithTimer(nativeNotification, options);\n  },\n};\n\nfunction isInRangeInclusive(variable: number, min: number, max: number): boolean {\n  return variable >= min && variable <= max;\n}\n"]}