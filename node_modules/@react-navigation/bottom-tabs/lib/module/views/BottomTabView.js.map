{"version":3,"sources":["BottomTabView.tsx"],"names":["React","View","StyleSheet","NavigationHelpersContext","useTheme","ScreenContainer","SafeAreaProviderCompat","ResourceSavingScene","BottomTabBar","SceneContent","isFocused","children","colors","styles","content","backgroundColor","background","BottomTabView","Component","loaded","props","state","index","tabBar","tabBarOptions","navigation","descriptors","getDerivedStateFromProps","nextProps","prevState","includes","render","lazy","routes","container","pages","map","route","descriptor","key","unmountOnBlur","options","absoluteFill","renderTabBar","create","flex","overflow"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\n\nimport {\n  NavigationHelpersContext,\n  TabNavigationState,\n  useTheme,\n} from '@react-navigation/native';\nimport { ScreenContainer } from 'react-native-screens';\n\nimport SafeAreaProviderCompat from './SafeAreaProviderCompat';\nimport ResourceSavingScene from './ResourceSavingScene';\nimport BottomTabBar from './BottomTabBar';\nimport type {\n  BottomTabNavigationConfig,\n  BottomTabDescriptorMap,\n  BottomTabNavigationHelpers,\n  BottomTabBarProps,\n} from '../types';\n\ntype Props = BottomTabNavigationConfig & {\n  state: TabNavigationState;\n  navigation: BottomTabNavigationHelpers;\n  descriptors: BottomTabDescriptorMap;\n};\n\ntype State = {\n  loaded: number[];\n};\n\nfunction SceneContent({\n  isFocused,\n  children,\n}: {\n  isFocused: boolean;\n  children: React.ReactNode;\n}) {\n  const { colors } = useTheme();\n\n  return (\n    <View\n      accessibilityElementsHidden={!isFocused}\n      importantForAccessibility={isFocused ? 'auto' : 'no-hide-descendants'}\n      style={[styles.content, { backgroundColor: colors.background }]}\n    >\n      {children}\n    </View>\n  );\n}\n\nexport default class BottomTabView extends React.Component<Props, State> {\n  static defaultProps = {\n    lazy: true,\n  };\n\n  static getDerivedStateFromProps(nextProps: Props, prevState: State) {\n    const { index } = nextProps.state;\n\n    return {\n      // Set the current tab to be loaded if it was not loaded before\n      loaded: prevState.loaded.includes(index)\n        ? prevState.loaded\n        : [...prevState.loaded, index],\n    };\n  }\n\n  state = {\n    loaded: [this.props.state.index],\n  };\n\n  private renderTabBar = () => {\n    const {\n      tabBar = (props: BottomTabBarProps) => <BottomTabBar {...props} />,\n      tabBarOptions,\n      state,\n      navigation,\n      descriptors,\n    } = this.props;\n    return tabBar({\n      ...tabBarOptions,\n      state: state,\n      descriptors: descriptors,\n      navigation: navigation,\n    });\n  };\n\n  render() {\n    const { state, descriptors, navigation, lazy } = this.props;\n    const { routes } = state;\n    const { loaded } = this.state;\n\n    return (\n      <NavigationHelpersContext.Provider value={navigation}>\n        <SafeAreaProviderCompat>\n          <View style={styles.container}>\n            <ScreenContainer style={styles.pages}>\n              {routes.map((route, index) => {\n                const descriptor = descriptors[route.key];\n                const { unmountOnBlur } = descriptor.options;\n                const isFocused = state.index === index;\n\n                if (unmountOnBlur && !isFocused) {\n                  return null;\n                }\n\n                if (lazy && !loaded.includes(index) && !isFocused) {\n                  // Don't render a screen if we've never navigated to it\n                  return null;\n                }\n\n                return (\n                  <ResourceSavingScene\n                    key={route.key}\n                    style={StyleSheet.absoluteFill}\n                    isVisible={isFocused}\n                  >\n                    <SceneContent isFocused={isFocused}>\n                      {descriptor.render()}\n                    </SceneContent>\n                  </ResourceSavingScene>\n                );\n              })}\n            </ScreenContainer>\n            {this.renderTabBar()}\n          </View>\n        </SafeAreaProviderCompat>\n      </NavigationHelpersContext.Provider>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n  pages: {\n    flex: 1,\n  },\n  content: {\n    flex: 1,\n  },\n});\n"]}