{"version":3,"sources":["ResourceSavingScene.tsx"],"names":["React","Platform","StyleSheet","View","Screen","screensEnabled","FAR_FAR_AWAY","ResourceSavingScene","Component","render","OS","props","isVisible","rest","children","style","styles","container","display","attached","detached","create","flex","overflow","top"],"mappings":";;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,QAAT,EAAmBC,UAAnB,EAA+BC,IAA/B,QAA2C,cAA3C;AACA,SAASC,MAAT,EAAiBC,cAAjB,QAAuC,sBAAvC;AAQA,MAAMC,YAAY,GAAG,KAArB,C,CAA4B;;AAE5B,eAAe,MAAMC,mBAAN,SAAkCP,KAAK,CAACQ,SAAxC,CAAyD;AACtEC,EAAAA,MAAM,GAAG;AACP;AACA,QAAI,CAAAJ,cAAc,SAAd,IAAAA,cAAc,WAAd,YAAAA,cAAc,OAAQJ,QAAQ,CAACS,EAAT,KAAgB,KAA1C,EAAiD;AAC/C,0BAA+B,KAAKC,KAApC;AAAA,YAAM;AAAEC,QAAAA;AAAF,OAAN;AAAA,YAAsBC,IAAtB,wDAD+C,CAG/C;;;AACA,0BAAO,oBAAC,MAAD;AAAQ,QAAA,MAAM,EAAED,SAAS,GAAG,CAAH,GAAO;AAAhC,SAAuCC,IAAvC,EAAP;AACD;;AAED,yBAAgD,KAAKF,KAArD;AAAA,UAAM;AAAEC,MAAAA,SAAF;AAAaE,MAAAA,QAAb;AAAuBC,MAAAA;AAAvB,KAAN;AAAA,UAAuCF,IAAvC;;AAEA,wBACE,oBAAC,IAAD;AACE,MAAA,KAAK,EAAE,CACLG,MAAM,CAACC,SADF,EAELhB,QAAQ,CAACS,EAAT,KAAgB,KAAhB,GACI;AAAEQ,QAAAA,OAAO,EAAEN,SAAS,GAAG,MAAH,GAAY;AAAhC,OADJ,GAEI,IAJC,EAKLG,KALK,CADT;AAQE,MAAA,WAAW,EAAE,KARf;AASE,MAAA,qBAAqB,EACnB;AACA;AACAd,MAAAA,QAAQ,CAACS,EAAT,KAAgB,KAAhB,GAAwB,CAACE,SAAzB,GAAqC,IAZzC;AAcE,MAAA,aAAa,EAAEA,SAAS,GAAG,MAAH,GAAY;AAdtC,OAeMC,IAfN,gBAiBE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAED,SAAS,GAAGI,MAAM,CAACG,QAAV,GAAqBH,MAAM,CAACI;AAAlD,OACGN,QADH,CAjBF,CADF;AAuBD;;AAnCqE;AAsCxE,MAAME,MAAM,GAAGd,UAAU,CAACmB,MAAX,CAAkB;AAC/BJ,EAAAA,SAAS,EAAE;AACTK,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,QAAQ,EAAE;AAFD,GADoB;AAK/BJ,EAAAA,QAAQ,EAAE;AACRG,IAAAA,IAAI,EAAE;AADE,GALqB;AAQ/BF,EAAAA,QAAQ,EAAE;AACRE,IAAAA,IAAI,EAAE,CADE;AAERE,IAAAA,GAAG,EAAElB;AAFG;AARqB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\nimport { Platform, StyleSheet, View } from 'react-native';\nimport { Screen, screensEnabled } from 'react-native-screens';\n\ntype Props = {\n  isVisible: boolean;\n  children: React.ReactNode;\n  style?: any;\n};\n\nconst FAR_FAR_AWAY = 30000; // this should be big enough to move the whole view out of its container\n\nexport default class ResourceSavingScene extends React.Component<Props> {\n  render() {\n    // react-native-screens is buggy on web\n    if (screensEnabled?.() && Platform.OS !== 'web') {\n      const { isVisible, ...rest } = this.props;\n\n      // @ts-expect-error: stackPresentation is incorrectly marked as required\n      return <Screen active={isVisible ? 1 : 0} {...rest} />;\n    }\n\n    const { isVisible, children, style, ...rest } = this.props;\n\n    return (\n      <View\n        style={[\n          styles.container,\n          Platform.OS === 'web'\n            ? { display: isVisible ? 'flex' : 'none' }\n            : null,\n          style,\n        ]}\n        collapsable={false}\n        removeClippedSubviews={\n          // On iOS, set removeClippedSubviews to true only when not focused\n          // This is an workaround for a bug where the clipped view never re-appears\n          Platform.OS === 'ios' ? !isVisible : true\n        }\n        pointerEvents={isVisible ? 'auto' : 'none'}\n        {...rest}\n      >\n        <View style={isVisible ? styles.attached : styles.detached}>\n          {children}\n        </View>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n  attached: {\n    flex: 1,\n  },\n  detached: {\n    flex: 1,\n    top: FAR_FAR_AWAY,\n  },\n});\n"]}