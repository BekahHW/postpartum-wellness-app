{"version":3,"sources":["getStateFromPath.tsx"],"names":["escape","queryString","checkLegacyPathConfig","getStateFromPath","path","options","legacy","compatOptions","initialRoutes","initialRouteName","push","connectedRoutes","Object","keys","screens","remaining","replace","endsWith","undefined","routes","split","filter","Boolean","map","segment","i","self","name","decodeURIComponent","length","params","parseQueryParams","createNestedStateObject","configs","concat","key","createNormalizedConfigs","sort","a","b","pattern","startsWith","aParts","bParts","aWildcardIndex","indexOf","bWildcardIndex","match","find","config","routeNames","every","c","screen","parse","result","current","allParams","remainingPath","matchAgainstConfigs","regex","RegExp","source","createRouteObjects","segments","shift","join","state","index","route","findFocusedRoute","findParseConfigForRoute","joinPaths","paths","p","paramPatterns","reduce","acc","value","routeConfig","initials","parentPattern","createConfigItem","exact","Error","forEach","nestedConfig","pop","it","routeName","flatConfig","findInitialRoute","includes","createStateObject","initialRoute","isEmpty","nestedState","nestedStateIndex","parseConfig","query"],"mappings":"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","sourcesContent":["import escape from 'escape-string-regexp';\nimport queryString from 'query-string';\nimport type {\n  NavigationState,\n  PartialState,\n  InitialState,\n} from '@react-navigation/routers';\nimport checkLegacyPathConfig from './checkLegacyPathConfig';\nimport type { PathConfigMap } from './types';\n\ntype Options = {\n  initialRouteName?: string;\n  screens: PathConfigMap;\n};\n\ntype ParseConfig = Record<string, (value: string) => any>;\n\ntype RouteConfig = {\n  screen: string;\n  regex?: RegExp;\n  path: string;\n  pattern: string;\n  routeNames: string[];\n  parse?: ParseConfig;\n};\n\ntype InitialRouteConfig = {\n  initialRouteName: string;\n  connectedRoutes: string[];\n};\n\ntype ResultState = PartialState<NavigationState> & {\n  state?: ResultState;\n};\n\n/**\n * Utility to parse a path string to initial state object accepted by the container.\n * This is useful for deep linking when we need to handle the incoming URL.\n *\n * Example:\n * ```js\n * getStateFromPath(\n *   '/chat/jane/42',\n *   {\n *     screens: {\n *       Chat: {\n *         path: 'chat/:author/:id',\n *         parse: { id: Number }\n *       }\n *     }\n *   }\n * )\n * ```\n * @param path Path string to parse and convert, e.g. /foo/bar?count=42.\n * @param options Extra options to fine-tune how to parse the path.\n */\nexport default function getStateFromPath(\n  path: string,\n  options?: Options\n): ResultState | undefined {\n  const [legacy, compatOptions] = checkLegacyPathConfig(options);\n\n  let initialRoutes: InitialRouteConfig[] = [];\n\n  if (compatOptions?.initialRouteName) {\n    initialRoutes.push({\n      initialRouteName: compatOptions.initialRouteName,\n      connectedRoutes: Object.keys(compatOptions.screens),\n    });\n  }\n\n  const screens = compatOptions?.screens;\n\n  let remaining = path\n    .replace(/\\/+/g, '/') // Replace multiple slash (//) with single ones\n    .replace(/^\\//, '') // Remove extra leading slash\n    .replace(/\\?.*$/, ''); // Remove query params which we will handle later\n\n  // Make sure there is a trailing slash\n  remaining = remaining.endsWith('/') ? remaining : `${remaining}/`;\n\n  if (screens === undefined) {\n    // When no config is specified, use the path segments as route names\n    const routes = remaining\n      .split('/')\n      .filter(Boolean)\n      .map((segment, i, self) => {\n        const name = decodeURIComponent(segment);\n\n        if (i === self.length - 1) {\n          return { name, params: parseQueryParams(path) };\n        }\n\n        return { name };\n      });\n\n    if (routes.length) {\n      return createNestedStateObject(routes, initialRoutes);\n    }\n\n    return undefined;\n  }\n\n  // Create a normalized configs array which will be easier to use\n  const configs = ([] as RouteConfig[])\n    .concat(\n      ...Object.keys(screens).map((key) =>\n        createNormalizedConfigs(\n          legacy,\n          key,\n          screens as PathConfigMap,\n          [],\n          initialRoutes\n        )\n      )\n    )\n    .sort((a, b) => {\n      // Sort config so that:\n      // - the most exhaustive ones are always at the beginning\n      // - patterns with wildcard are always at the end\n\n      // If one of the patterns starts with the other, it's more exhaustive\n      // So move it up\n      if (a.pattern.startsWith(b.pattern)) {\n        return 1;\n      }\n\n      if (b.pattern.startsWith(a.pattern)) {\n        return 1;\n      }\n\n      const aParts = a.pattern.split('/');\n      const bParts = b.pattern.split('/');\n\n      const aWildcardIndex = aParts.indexOf('*');\n      const bWildcardIndex = bParts.indexOf('*');\n\n      // If only one of the patterns has a wildcard, move it down in the list\n      if (aWildcardIndex === -1 && bWildcardIndex !== -1) {\n        return -1;\n      }\n\n      if (aWildcardIndex !== -1 && bWildcardIndex === -1) {\n        return 1;\n      }\n\n      if (aWildcardIndex === bWildcardIndex) {\n        // If `b` has more `/`, it's more exhaustive\n        // So we move it up in the list\n        return bParts.length - aParts.length;\n      }\n\n      // If the wildcard appears later in the pattern (has higher index), it's more specific\n      // So we move it up in the list\n      return bWildcardIndex - aWildcardIndex;\n    });\n\n  if (remaining === '/') {\n    // We need to add special handling of empty path so navigation to empty path also works\n    // When handling empty path, we should only look at the root level config\n    const match = configs.find(\n      (config) =>\n        config.path === '' &&\n        config.routeNames.every(\n          // Make sure that none of the parent configs have a non-empty path defined\n          (name) => !configs.find((c) => c.screen === name)?.path\n        )\n    );\n\n    if (match) {\n      return createNestedStateObject(\n        match.routeNames.map((name, i, self) => {\n          if (i === self.length - 1) {\n            return { name, params: parseQueryParams(path, match.parse) };\n          }\n\n          return { name };\n        }),\n        initialRoutes\n      );\n    }\n\n    return undefined;\n  }\n\n  let result: PartialState<NavigationState> | undefined;\n  let current: PartialState<NavigationState> | undefined;\n\n  if (legacy === false) {\n    // If we're not in legacy mode,, we match the whole path against the regex instead of segments\n    // This makes sure matches such as wildcard will catch any unmatched routes, even if nested\n    const { routeNames, allParams, remainingPath } = matchAgainstConfigs(\n      remaining,\n      configs.map((c) => ({\n        ...c,\n        // Add `$` to the regex to make sure it matches till end of the path and not just beginning\n        regex: c.regex ? new RegExp(c.regex.source + '$') : undefined,\n      }))\n    );\n\n    if (routeNames !== undefined) {\n      // This will always be empty if full path matched\n      remaining = remainingPath;\n      current = createNestedStateObject(\n        createRouteObjects(configs, routeNames, allParams),\n        initialRoutes\n      );\n      result = current;\n    }\n  } else {\n    // In legacy mode, we divide the path into segments and match piece by piece\n    // This preserves the legacy behaviour, but we should remove it in next major\n    while (remaining) {\n      let { routeNames, allParams, remainingPath } = matchAgainstConfigs(\n        remaining,\n        configs\n      );\n\n      remaining = remainingPath;\n\n      // If we hadn't matched any segments earlier, use the path as route name\n      if (routeNames === undefined) {\n        const segments = remaining.split('/');\n\n        routeNames = [decodeURIComponent(segments[0])];\n        segments.shift();\n        remaining = segments.join('/');\n      }\n\n      const state = createNestedStateObject(\n        createRouteObjects(configs, routeNames, allParams),\n        initialRoutes\n      );\n\n      if (current) {\n        // The state should be nested inside the deepest route we parsed before\n        while (current?.routes[current.index || 0].state) {\n          current = current.routes[current.index || 0].state;\n        }\n\n        (current as PartialState<NavigationState>).routes[\n          current?.index || 0\n        ].state = state;\n      } else {\n        result = state;\n      }\n\n      current = state;\n    }\n  }\n\n  if (current == null || result == null) {\n    return undefined;\n  }\n\n  const route = findFocusedRoute(current);\n  const params = parseQueryParams(\n    path,\n    findParseConfigForRoute(route.name, configs)\n  );\n\n  if (params) {\n    // @ts-expect-error: params should be treated as read-only, but we're creating the state here so it doesn't matter\n    route.params = { ...route.params, ...params };\n  }\n\n  return result;\n}\n\nconst joinPaths = (...paths: string[]): string =>\n  ([] as string[])\n    .concat(...paths.map((p) => p.split('/')))\n    .filter(Boolean)\n    .join('/');\n\nconst matchAgainstConfigs = (remaining: string, configs: RouteConfig[]) => {\n  let routeNames: string[] | undefined;\n  let allParams: Record<string, any> | undefined;\n  let remainingPath = remaining;\n\n  // Go through all configs, and see if the next path segment matches our regex\n  for (const config of configs) {\n    if (!config.regex) {\n      continue;\n    }\n\n    const match = remainingPath.match(config.regex);\n\n    // If our regex matches, we need to extract params from the path\n    if (match) {\n      routeNames = [...config.routeNames];\n\n      const paramPatterns = config.pattern\n        .split('/')\n        .filter((p) => p.startsWith(':'));\n\n      if (paramPatterns.length) {\n        allParams = paramPatterns.reduce<Record<string, any>>((acc, p, i) => {\n          const value = match![(i + 1) * 2].replace(/\\//, ''); // The param segments appear every second item starting from 2 in the regex match result\n\n          acc[p] = value;\n\n          return acc;\n        }, {});\n      }\n\n      remainingPath = remainingPath.replace(match[1], '');\n\n      break;\n    }\n  }\n\n  return { routeNames, allParams, remainingPath };\n};\n\nconst createNormalizedConfigs = (\n  legacy: boolean,\n  screen: string,\n  routeConfig: PathConfigMap,\n  routeNames: string[] = [],\n  initials: InitialRouteConfig[],\n  parentPattern?: string\n): RouteConfig[] => {\n  const configs: RouteConfig[] = [];\n\n  routeNames.push(screen);\n\n  const config = routeConfig[screen];\n\n  if (typeof config === 'string') {\n    // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n    const pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n\n    configs.push(createConfigItem(legacy, screen, routeNames, pattern, config));\n  } else if (typeof config === 'object') {\n    let pattern: string | undefined;\n\n    // if an object is specified as the value (e.g. Foo: { ... }),\n    // it can have `path` property and\n    // it could have `screens` prop which has nested configs\n    if (typeof config.path === 'string') {\n      if (legacy) {\n        pattern =\n          config.exact !== true && parentPattern\n            ? joinPaths(parentPattern, config.path)\n            : config.path;\n      } else {\n        if (config.exact && config.path === undefined) {\n          throw new Error(\n            \"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\"\n          );\n        }\n\n        pattern =\n          config.exact !== true\n            ? joinPaths(parentPattern || '', config.path || '')\n            : config.path || '';\n      }\n\n      configs.push(\n        createConfigItem(\n          legacy,\n          screen,\n          routeNames,\n          pattern,\n          config.path,\n          config.parse\n        )\n      );\n    }\n\n    if (config.screens) {\n      // property `initialRouteName` without `screens` has no purpose\n      if (config.initialRouteName) {\n        initials.push({\n          initialRouteName: config.initialRouteName,\n          connectedRoutes: Object.keys(config.screens),\n        });\n      }\n\n      Object.keys(config.screens).forEach((nestedConfig) => {\n        const result = createNormalizedConfigs(\n          legacy,\n          nestedConfig,\n          config.screens as PathConfigMap,\n          routeNames,\n          initials,\n          pattern ?? parentPattern\n        );\n\n        configs.push(...result);\n      });\n    }\n  }\n\n  routeNames.pop();\n\n  return configs;\n};\n\nconst createConfigItem = (\n  legacy: boolean,\n  screen: string,\n  routeNames: string[],\n  pattern: string,\n  path: string,\n  parse?: ParseConfig\n): RouteConfig => {\n  // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n  pattern = pattern.split('/').filter(Boolean).join('/');\n\n  const regex = pattern\n    ? new RegExp(\n        `^(${pattern\n          .split('/')\n          .map((it) => {\n            if (legacy && it === '*') {\n              throw new Error(\n                \"Please update your config to the new format to use wildcard pattern ('*'). https://reactnavigation.org/docs/configuring-links/#updating-config\"\n              );\n            }\n\n            if (it.startsWith(':')) {\n              return `(([^/]+\\\\/)${it.endsWith('?') ? '?' : ''})`;\n            }\n\n            return `${it === '*' ? '.*' : escape(it)}\\\\/`;\n          })\n          .join('')})`\n      )\n    : undefined;\n\n  return {\n    screen,\n    regex,\n    pattern,\n    path,\n    // The routeNames array is mutated, so copy it to keep the current state\n    routeNames: [...routeNames],\n    parse,\n  };\n};\n\nconst findParseConfigForRoute = (\n  routeName: string,\n  flatConfig: RouteConfig[]\n): ParseConfig | undefined => {\n  for (const config of flatConfig) {\n    if (routeName === config.routeNames[config.routeNames.length - 1]) {\n      return config.parse;\n    }\n  }\n\n  return undefined;\n};\n\n// Try to find an initial route connected with the one passed\nconst findInitialRoute = (\n  routeName: string,\n  initialRoutes: InitialRouteConfig[]\n): string | undefined => {\n  for (const config of initialRoutes) {\n    if (config.connectedRoutes.includes(routeName)) {\n      return config.initialRouteName === routeName\n        ? undefined\n        : config.initialRouteName;\n    }\n  }\n  return undefined;\n};\n\n// returns state object with values depending on whether\n// it is the end of state and if there is initialRoute for this level\nconst createStateObject = (\n  initialRoute: string | undefined,\n  routeName: string,\n  params: Record<string, any> | undefined,\n  isEmpty: boolean\n): InitialState => {\n  if (isEmpty) {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{ name: initialRoute }, { name: routeName as string, params }],\n      };\n    } else {\n      return {\n        routes: [{ name: routeName as string, params }],\n      };\n    }\n  } else {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [\n          { name: initialRoute },\n          { name: routeName as string, params, state: { routes: [] } },\n        ],\n      };\n    } else {\n      return {\n        routes: [{ name: routeName as string, params, state: { routes: [] } }],\n      };\n    }\n  }\n};\n\nconst createNestedStateObject = (\n  routes: { name: string; params?: object }[],\n  initialRoutes: InitialRouteConfig[]\n) => {\n  let state: InitialState;\n  let route = routes.shift() as { name: string; params?: object };\n  let initialRoute = findInitialRoute(route.name, initialRoutes);\n\n  state = createStateObject(\n    initialRoute,\n    route.name,\n    route.params,\n    routes.length === 0\n  );\n\n  if (routes.length > 0) {\n    let nestedState = state;\n\n    while ((route = routes.shift() as { name: string; params?: object })) {\n      initialRoute = findInitialRoute(route.name, initialRoutes);\n\n      const nestedStateIndex =\n        nestedState.index || nestedState.routes.length - 1;\n\n      nestedState.routes[nestedStateIndex].state = createStateObject(\n        initialRoute,\n        route.name,\n        route.params,\n        routes.length === 0\n      );\n\n      if (routes.length > 0) {\n        nestedState = nestedState.routes[nestedStateIndex]\n          .state as InitialState;\n      }\n    }\n  }\n\n  return state;\n};\n\nconst createRouteObjects = (\n  configs: RouteConfig[],\n  routeNames: string[],\n  allParams?: Record<string, any>\n) =>\n  routeNames.map((name) => {\n    const config = configs.find((c) => c.screen === name);\n\n    let params: object | undefined;\n\n    if (allParams && config?.path) {\n      const pattern = config.path;\n\n      if (pattern) {\n        const paramPatterns = pattern\n          .split('/')\n          .filter((p) => p.startsWith(':'));\n\n        if (paramPatterns.length) {\n          params = paramPatterns.reduce<Record<string, any>>((acc, p) => {\n            const key = p.replace(/^:/, '').replace(/\\?$/, '');\n            const value = allParams![p];\n\n            if (value) {\n              acc[key] =\n                config.parse && config.parse[key]\n                  ? config.parse[key](value)\n                  : value;\n            }\n\n            return acc;\n          }, {});\n        }\n      }\n    }\n\n    if (params && Object.keys(params).length) {\n      return { name, params };\n    }\n\n    return { name };\n  });\n\nconst findFocusedRoute = (state: InitialState) => {\n  let current: InitialState | undefined = state;\n\n  while (current?.routes[current.index || 0].state) {\n    // The query params apply to the deepest route\n    current = current.routes[current.index || 0].state;\n  }\n\n  const route = (current as PartialState<NavigationState>).routes[\n    current?.index || 0\n  ];\n\n  return route;\n};\n\nconst parseQueryParams = (\n  path: string,\n  parseConfig?: Record<string, (value: string) => any>\n) => {\n  const query = path.split('?')[1];\n  const params = queryString.parse(query);\n\n  if (parseConfig) {\n    Object.keys(params).forEach((name) => {\n      if (parseConfig[name] && typeof params[name] === 'string') {\n        params[name] = parseConfig[name](params[name] as string);\n      }\n    });\n  }\n\n  return Object.keys(params).length ? params : undefined;\n};\n"]}