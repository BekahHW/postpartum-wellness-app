{"version":3,"sources":["useDescriptors.tsx"],"names":["React","SceneView","NavigationBuilderContext","useNavigationCache","NavigationContext","NavigationRouteContext","useDescriptors","state","screens","navigation","screenOptions","onAction","getState","setState","addListener","addKeyedListener","onRouteFocus","router","emitter","options","setOptions","useState","onDispatchAction","onOptionsChange","useContext","context","useMemo","navigations","routes","reduce","acc","route","screen","name","key","routeOptions","render"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport type {\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  Router,\n} from '@react-navigation/routers';\nimport SceneView from './SceneView';\nimport NavigationBuilderContext, {\n  AddListener,\n  AddKeyedListener,\n} from './NavigationBuilderContext';\nimport type { NavigationEventEmitter } from './useEventEmitter';\nimport useNavigationCache from './useNavigationCache';\nimport NavigationContext from './NavigationContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport type {\n  Descriptor,\n  NavigationHelpers,\n  RouteConfig,\n  RouteProp,\n  EventMapBase,\n} from './types';\n\ntype Options<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n> = {\n  state: State;\n  screens: Record<\n    string,\n    RouteConfig<ParamListBase, string, State, ScreenOptions, EventMap>\n  >;\n  navigation: NavigationHelpers<ParamListBase>;\n  screenOptions?:\n    | ScreenOptions\n    | ((props: {\n        route: RouteProp<ParamListBase, string>;\n        navigation: any;\n      }) => ScreenOptions);\n  onAction: (\n    action: NavigationAction,\n    visitedNavigators?: Set<string>\n  ) => boolean;\n  getState: () => State;\n  setState: (state: State) => void;\n  addListener: AddListener;\n  addKeyedListener: AddKeyedListener;\n  onRouteFocus: (key: string) => void;\n  router: Router<State, NavigationAction>;\n  emitter: NavigationEventEmitter<any>;\n};\n\n/**\n * Hook to create descriptor objects for the child routes.\n *\n * A descriptor object provides 3 things:\n * - Helper method to render a screen\n * - Options specified by the screen for the navigator\n * - Navigation object intended for the route\n */\nexport default function useDescriptors<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n>({\n  state,\n  screens,\n  navigation,\n  screenOptions,\n  onAction,\n  getState,\n  setState,\n  addListener,\n  addKeyedListener,\n  onRouteFocus,\n  router,\n  emitter,\n}: Options<State, ScreenOptions, EventMap>) {\n  const [options, setOptions] = React.useState<Record<string, object>>({});\n  const { onDispatchAction, onOptionsChange } = React.useContext(\n    NavigationBuilderContext\n  );\n\n  const context = React.useMemo(\n    () => ({\n      navigation,\n      onAction,\n      addListener,\n      addKeyedListener,\n      onRouteFocus,\n      onDispatchAction,\n      onOptionsChange,\n    }),\n    [\n      navigation,\n      onAction,\n      addListener,\n      addKeyedListener,\n      onRouteFocus,\n      onDispatchAction,\n      onOptionsChange,\n    ]\n  );\n\n  const navigations = useNavigationCache<State, ScreenOptions>({\n    state,\n    getState,\n    navigation,\n    setOptions,\n    router,\n    emitter,\n  });\n\n  return state.routes.reduce<\n    Record<string, Descriptor<ParamListBase, string, State, ScreenOptions>>\n  >((acc, route) => {\n    const screen = screens[route.name];\n    const navigation = navigations[route.key];\n\n    const routeOptions = {\n      // The default `screenOptions` passed to the navigator\n      ...(typeof screenOptions === 'object' || screenOptions == null\n        ? screenOptions\n        : // @ts-expect-error: this is a function, but typescript doesn't think so\n          screenOptions({\n            route,\n            navigation,\n          })),\n      // The `options` prop passed to `Screen` elements\n      ...(typeof screen.options === 'object' || screen.options == null\n        ? screen.options\n        : // @ts-expect-error: this is a function, but typescript doesn't think so\n          screen.options({\n            route,\n            navigation,\n          })),\n      // The options set via `navigation.setOptions`\n      ...options[route.key],\n    };\n\n    acc[route.key] = {\n      navigation,\n      render() {\n        return (\n          <NavigationBuilderContext.Provider key={route.key} value={context}>\n            <NavigationContext.Provider value={navigation}>\n              <NavigationRouteContext.Provider value={route}>\n                <SceneView\n                  navigation={navigation}\n                  route={route}\n                  screen={screen}\n                  getState={getState}\n                  setState={setState}\n                  options={routeOptions}\n                />\n              </NavigationRouteContext.Provider>\n            </NavigationContext.Provider>\n          </NavigationBuilderContext.Provider>\n        );\n      },\n      options: routeOptions as ScreenOptions,\n    };\n\n    return acc;\n  }, {});\n}\n"]}