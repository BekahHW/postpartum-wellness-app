{"version":3,"sources":["useIsFocused.tsx"],"names":["React","useSubscription","useNavigation","useIsFocused","navigation","getCurrentValue","useCallback","isFocused","subscribe","callback","unsubscribeFocus","addListener","unsubscribeBlur"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,eAAT,QAAgC,kBAAhC;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AAEA;;;;;;AAKA,eAAe,SAASC,YAAT,GAAiC;AAC9C,QAAMC,UAAU,GAAGF,aAAa,EAAhC,CAD8C,CAE9C;;AACA,QAAMG,eAAe,GAAGL,KAAK,CAACM,WAAN,CAAkBF,UAAU,CAACG,SAA7B,EAAwC,CAACH,UAAD,CAAxC,CAAxB;AACA,QAAMI,SAAS,GAAGR,KAAK,CAACM,WAAN,CACfG,QAAD,IAA0B;AACxB,UAAMC,gBAAgB,GAAGN,UAAU,CAACO,WAAX,CAAuB,OAAvB,EAAgCF,QAAhC,CAAzB;AAEA,UAAMG,eAAe,GAAGR,UAAU,CAACO,WAAX,CAAuB,MAAvB,EAA+BF,QAA/B,CAAxB;AAEA,WAAO,MAAM;AACXC,MAAAA,gBAAgB;AAChBE,MAAAA,eAAe;AAChB,KAHD;AAID,GAVe,EAWhB,CAACR,UAAD,CAXgB,CAAlB;AAcA,SAAOH,eAAe,CAAC;AACrBI,IAAAA,eADqB;AAErBG,IAAAA;AAFqB,GAAD,CAAtB;AAID","sourcesContent":["import * as React from 'react';\nimport { useSubscription } from 'use-subscription';\nimport useNavigation from './useNavigation';\n\n/**\n * Hook to get the current focus state of the screen. Returns a `true` if screen is focused, otherwise `false`.\n * This can be used if a component needs to render something based on the focus state.\n * It uses `use-subscription` under the hood for safer use in concurrent mode.\n */\nexport default function useIsFocused(): boolean {\n  const navigation = useNavigation();\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const getCurrentValue = React.useCallback(navigation.isFocused, [navigation]);\n  const subscribe = React.useCallback(\n    (callback: () => void) => {\n      const unsubscribeFocus = navigation.addListener('focus', callback);\n\n      const unsubscribeBlur = navigation.addListener('blur', callback);\n\n      return () => {\n        unsubscribeFocus();\n        unsubscribeBlur();\n      };\n    },\n    [navigation]\n  );\n\n  return useSubscription({\n    getCurrentValue,\n    subscribe,\n  });\n}\n"]}