{"version":3,"sources":["useIsFocused.tsx"],"names":["useIsFocused","navigation","getCurrentValue","React","useCallback","isFocused","subscribe","callback","unsubscribeFocus","addListener","unsubscribeBlur"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;;;AAEA;;;;;AAKe,SAASA,YAAT,GAAiC;AAC9C,QAAMC,UAAU,GAAG,6BAAnB,CAD8C,CAE9C;;AACA,QAAMC,eAAe,GAAGC,KAAK,CAACC,WAAN,CAAkBH,UAAU,CAACI,SAA7B,EAAwC,CAACJ,UAAD,CAAxC,CAAxB;AACA,QAAMK,SAAS,GAAGH,KAAK,CAACC,WAAN,CACfG,QAAD,IAA0B;AACxB,UAAMC,gBAAgB,GAAGP,UAAU,CAACQ,WAAX,CAAuB,OAAvB,EAAgCF,QAAhC,CAAzB;AAEA,UAAMG,eAAe,GAAGT,UAAU,CAACQ,WAAX,CAAuB,MAAvB,EAA+BF,QAA/B,CAAxB;AAEA,WAAO,MAAM;AACXC,MAAAA,gBAAgB;AAChBE,MAAAA,eAAe;AAChB,KAHD;AAID,GAVe,EAWhB,CAACT,UAAD,CAXgB,CAAlB;AAcA,SAAO,sCAAgB;AACrBC,IAAAA,eADqB;AAErBI,IAAAA;AAFqB,GAAhB,CAAP;AAID","sourcesContent":["import * as React from 'react';\nimport { useSubscription } from 'use-subscription';\nimport useNavigation from './useNavigation';\n\n/**\n * Hook to get the current focus state of the screen. Returns a `true` if screen is focused, otherwise `false`.\n * This can be used if a component needs to render something based on the focus state.\n * It uses `use-subscription` under the hood for safer use in concurrent mode.\n */\nexport default function useIsFocused(): boolean {\n  const navigation = useNavigation();\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const getCurrentValue = React.useCallback(navigation.isFocused, [navigation]);\n  const subscribe = React.useCallback(\n    (callback: () => void) => {\n      const unsubscribeFocus = navigation.addListener('focus', callback);\n\n      const unsubscribeBlur = navigation.addListener('blur', callback);\n\n      return () => {\n        unsubscribeFocus();\n        unsubscribeBlur();\n      };\n    },\n    [navigation]\n  );\n\n  return useSubscription({\n    getCurrentValue,\n    subscribe,\n  });\n}\n"]}