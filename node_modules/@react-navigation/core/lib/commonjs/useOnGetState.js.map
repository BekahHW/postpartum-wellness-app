{"version":3,"sources":["useOnGetState.tsx"],"names":["useOnGetState","getState","getStateListeners","addKeyedListener","React","useContext","NavigationBuilderContext","route","NavigationRouteContext","key","getRehydratedState","useCallback","state","routes","map","childState","useEffect"],"mappings":";;;;;;;AAAA;;AAEA;;AAGA;;AACA;;;;;;;;;;;;;;AAOe,SAASA,aAAT,CAAuB;AACpCC,EAAAA,QADoC;AAEpCC,EAAAA;AAFoC,CAAvB,EAGH;AACV,QAAM;AAAEC,IAAAA;AAAF,MAAuBC,KAAK,CAACC,UAAN,CAAiBC,iCAAjB,CAA7B;AACA,QAAMC,KAAK,GAAGH,KAAK,CAACC,UAAN,CAAiBG,+BAAjB,CAAd;AACA,QAAMC,GAAG,GAAGF,KAAK,GAAGA,KAAK,CAACE,GAAT,GAAe,MAAhC;AAEA,QAAMC,kBAAkB,GAAGN,KAAK,CAACO,WAAN,CAAkB,MAAM;AACjD,UAAMC,KAAK,GAAGX,QAAQ,EAAtB,CADiD,CAGjD;;AACA,UAAMY,MAAM,GAAGD,KAAK,CAACC,MAAN,CAAaC,GAAb,CAAkBP,KAAD,IAAW;AAAA;;AACzC,YAAMQ,UAAU,4BAAGb,iBAAiB,CAACK,KAAK,CAACE,GAAP,CAApB,0DAAG,2BAAAP,iBAAiB,CAApC;;AAEA,UAAIK,KAAK,CAACK,KAAN,KAAgBG,UAApB,EAAgC;AAC9B,eAAOR,KAAP;AACD;;AAED,6CAAYA,KAAZ;AAAmBK,QAAAA,KAAK,EAAEG;AAA1B;AACD,KARc,CAAf;;AAUA,QAAI,2BAAaH,KAAK,CAACC,MAAnB,EAA2BA,MAA3B,CAAJ,EAAwC;AACtC,aAAOD,KAAP;AACD;;AAED,2CAAYA,KAAZ;AAAmBC,MAAAA;AAAnB;AACD,GAnB0B,EAmBxB,CAACZ,QAAD,EAAWC,iBAAX,CAnBwB,CAA3B;AAqBAE,EAAAA,KAAK,CAACY,SAAN,CAAgB,MAAM;AACpB,WAAOb,gBAAP,aAAOA,gBAAP,uBAAOA,gBAAgB,CAAG,UAAH,EAAeM,GAAf,EAAoBC,kBAApB,CAAvB;AACD,GAFD,EAEG,CAACP,gBAAD,EAAmBO,kBAAnB,EAAuCD,GAAvC,CAFH;AAGD","sourcesContent":["import * as React from 'react';\nimport type { NavigationState } from '@react-navigation/routers';\nimport NavigationBuilderContext, {\n  GetStateListener,\n} from './NavigationBuilderContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport isArrayEqual from './isArrayEqual';\n\ntype Options = {\n  getState: () => NavigationState;\n  getStateListeners: Record<string, GetStateListener | undefined>;\n};\n\nexport default function useOnGetState({\n  getState,\n  getStateListeners,\n}: Options) {\n  const { addKeyedListener } = React.useContext(NavigationBuilderContext);\n  const route = React.useContext(NavigationRouteContext);\n  const key = route ? route.key : 'root';\n\n  const getRehydratedState = React.useCallback(() => {\n    const state = getState();\n\n    // Avoid returning new route objects if we don't need to\n    const routes = state.routes.map((route) => {\n      const childState = getStateListeners[route.key]?.();\n\n      if (route.state === childState) {\n        return route;\n      }\n\n      return { ...route, state: childState };\n    });\n\n    if (isArrayEqual(state.routes, routes)) {\n      return state;\n    }\n\n    return { ...state, routes };\n  }, [getState, getStateListeners]);\n\n  React.useEffect(() => {\n    return addKeyedListener?.('getState', key, getRehydratedState);\n  }, [addKeyedListener, getRehydratedState, key]);\n}\n"]}