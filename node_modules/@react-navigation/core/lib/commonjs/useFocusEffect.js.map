{"version":3,"sources":["useFocusEffect.tsx"],"names":["useFocusEffect","effect","navigation","React","useEffect","isFocused","cleanup","callback","destroy","undefined","process","env","NODE_ENV","message","then","JSON","stringify","console","error","unsubscribeFocus","addListener","unsubscribeBlur"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;AAIA;;;;;;;AAOe,SAASA,cAAT,CAAwBC,MAAxB,EAAgD;AAC7D,QAAMC,UAAU,GAAG,6BAAnB;AAEAC,EAAAA,KAAK,CAACC,SAAN,CAAgB,MAAM;AACpB,QAAIC,SAAS,GAAG,KAAhB;AACA,QAAIC,OAAJ;;AAEA,UAAMC,QAAQ,GAAG,MAAM;AACrB,YAAMC,OAAO,GAAGP,MAAM,EAAtB;;AAEA,UAAIO,OAAO,KAAKC,SAAZ,IAAyB,OAAOD,OAAP,KAAmB,UAAhD,EAA4D;AAC1D,eAAOA,OAAP;AACD;;AAED,UAAIE,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,YAAIC,OAAO,GACT,6FADF;;AAGA,YAAIL,OAAO,KAAK,IAAhB,EAAsB;AACpBK,UAAAA,OAAO,IACL,kGADF;AAED,SAHD,MAGO,IAAI,OAAQL,OAAD,CAAiBM,IAAxB,KAAiC,UAArC,EAAiD;AACtDD,UAAAA,OAAO,IACL,0FACA,uDADA,GAEA,8BAFA,GAGA,mBAHA,GAIA,8BAJA,GAKA,oCALA,GAMA,+BANA,GAOA,uDAPA,GAQA,gBARA,GASA,WATA,GAUA,oBAVA,GAWA,kBAXA,GAYA,QAZA,GAaA,oEAdF;AAeD,SAhBM,MAgBA;AACLA,UAAAA,OAAO,8BAAuBE,IAAI,CAACC,SAAL,CAAeR,OAAf,CAAvB,MAAP;AACD;;AAEDS,QAAAA,OAAO,CAACC,KAAR,CAAcL,OAAd;AACD;AACF,KApCD,CAJoB,CA0CpB;;;AACA,QAAIX,UAAU,CAACG,SAAX,EAAJ,EAA4B;AAC1BC,MAAAA,OAAO,GAAGC,QAAQ,EAAlB;AACAF,MAAAA,SAAS,GAAG,IAAZ;AACD;;AAED,UAAMc,gBAAgB,GAAGjB,UAAU,CAACkB,WAAX,CAAuB,OAAvB,EAAgC,MAAM;AAC7D;AACA;AACA,UAAIf,SAAJ,EAAe;AACb;AACD;;AAED,UAAIC,OAAO,KAAKG,SAAhB,EAA2B;AACzBH,QAAAA,OAAO;AACR;;AAEDA,MAAAA,OAAO,GAAGC,QAAQ,EAAlB;AACAF,MAAAA,SAAS,GAAG,IAAZ;AACD,KAbwB,CAAzB;AAeA,UAAMgB,eAAe,GAAGnB,UAAU,CAACkB,WAAX,CAAuB,MAAvB,EAA+B,MAAM;AAC3D,UAAId,OAAO,KAAKG,SAAhB,EAA2B;AACzBH,QAAAA,OAAO;AACR;;AAEDA,MAAAA,OAAO,GAAGG,SAAV;AACAJ,MAAAA,SAAS,GAAG,KAAZ;AACD,KAPuB,CAAxB;AASA,WAAO,MAAM;AACX,UAAIC,OAAO,KAAKG,SAAhB,EAA2B;AACzBH,QAAAA,OAAO;AACR;;AAEDa,MAAAA,gBAAgB;AAChBE,MAAAA,eAAe;AAChB,KAPD;AAQD,GAhFD,EAgFG,CAACpB,MAAD,EAASC,UAAT,CAhFH;AAiFD","sourcesContent":["import * as React from 'react';\nimport useNavigation from './useNavigation';\n\ntype EffectCallback = () => undefined | void | (() => void);\n\n/**\n * Hook to run an effect in a focused screen, similar to `React.useEffect`.\n * This can be used to perform side-effects such as fetching data or subscribing to events.\n * The passed callback should be wrapped in `React.useCallback` to avoid running the effect too often.\n *\n * @param callback Memoized callback containing the effect, should optionally return a cleanup function.\n */\nexport default function useFocusEffect(effect: EffectCallback) {\n  const navigation = useNavigation();\n\n  React.useEffect(() => {\n    let isFocused = false;\n    let cleanup: undefined | void | (() => void);\n\n    const callback = () => {\n      const destroy = effect();\n\n      if (destroy === undefined || typeof destroy === 'function') {\n        return destroy;\n      }\n\n      if (process.env.NODE_ENV !== 'production') {\n        let message =\n          'An effect function must not return anything besides a function, which is used for clean-up.';\n\n        if (destroy === null) {\n          message +=\n            \" You returned 'null'. If your effect does not require clean-up, return 'undefined' (or nothing).\";\n        } else if (typeof (destroy as any).then === 'function') {\n          message +=\n            \"\\n\\nIt looks like you wrote 'useFocusEffect(async () => ...)' or returned a Promise. \" +\n            'Instead, write the async function inside your effect ' +\n            'and call it immediately:\\n\\n' +\n            'useFocusEffect(\\n' +\n            '  React.useCallback() => {\\n' +\n            '    async function fetchData() {\\n' +\n            '      // You can await here\\n' +\n            '      const response = await MyAPI.getData(someId);\\n' +\n            '      // ...\\n' +\n            '    }\\n\\n' +\n            '    fetchData();\\n' +\n            '  }, [someId])\\n' +\n            '};\\n\\n' +\n            'See usage guide: https://reactnavigation.org/docs/use-focus-effect';\n        } else {\n          message += ` You returned: '${JSON.stringify(destroy)}'`;\n        }\n\n        console.error(message);\n      }\n    };\n\n    // We need to run the effect on intial render/dep changes if the screen is focused\n    if (navigation.isFocused()) {\n      cleanup = callback();\n      isFocused = true;\n    }\n\n    const unsubscribeFocus = navigation.addListener('focus', () => {\n      // If callback was already called for focus, avoid calling it again\n      // The focus event may also fire on intial render, so we guard against runing the effect twice\n      if (isFocused) {\n        return;\n      }\n\n      if (cleanup !== undefined) {\n        cleanup();\n      }\n\n      cleanup = callback();\n      isFocused = true;\n    });\n\n    const unsubscribeBlur = navigation.addListener('blur', () => {\n      if (cleanup !== undefined) {\n        cleanup();\n      }\n\n      cleanup = undefined;\n      isFocused = false;\n    });\n\n    return () => {\n      if (cleanup !== undefined) {\n        cleanup();\n      }\n\n      unsubscribeFocus();\n      unsubscribeBlur();\n    };\n  }, [effect, navigation]);\n}\n"]}