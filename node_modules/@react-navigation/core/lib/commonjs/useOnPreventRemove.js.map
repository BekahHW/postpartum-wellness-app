{"version":3,"sources":["useOnPreventRemove.tsx"],"names":["VISITED_ROUTE_KEYS","Symbol","shouldPreventRemove","emitter","beforeRemoveListeners","routes","action","reversedRoutes","reverse","visitedRouteKeys","Set","beforeRemoveAction","route","has","key","isPrevented","add","event","emit","type","target","data","canPreventDefault","defaultPrevented","useOnPreventRemove","getState","addKeyedListener","React","useContext","NavigationBuilderContext","NavigationRouteContext","routeKey","useEffect","state"],"mappings":";;;;;;;;AAAA;;AAMA;;AAGA;;;;;;;;;;;;;;AAUA,MAAMA,kBAAkB,GAAGC,MAAM,CAAC,oBAAD,CAAjC;;AAEO,MAAMC,mBAAmB,GAAG,CACjCC,OADiC,EAEjCC,qBAFiC,EAGjCC,MAHiC,EAIjCC,MAJiC,KAK9B;AAAA;;AACH;AACA,QAAMC,cAAc,GAAG,CAAC,GAAGF,MAAJ,EAAYG,OAAZ,EAAvB;AAEA,QAAMC,gBAA6B,GACjC;AADiC,2BAEjCH,MAAM,CAACN,kBAAD,CAF2B,yEAEH,IAAIU,GAAJ,EAFhC;;AAIA,QAAMC,kBAAkB,mCACnBL,MADmB;AAEtB,KAACN,kBAAD,GAAsBS;AAFA,IAAxB;;AAKA,OAAK,MAAMG,KAAX,IAAoBL,cAApB,EAAoC;AAAA;;AAClC,QAAIE,gBAAgB,CAACI,GAAjB,CAAqBD,KAAK,CAACE,GAA3B,CAAJ,EAAqC;AACnC;AACA;AACD,KAJiC,CAMlC;;;AACA,UAAMC,WAAW,4BAAGX,qBAAqB,CAACQ,KAAK,CAACE,GAAP,CAAxB,0DAAG,2BAAAV,qBAAqB,EAAcO,kBAAd,CAAzC;;AAEA,QAAII,WAAJ,EAAiB;AACf,aAAO,IAAP;AACD;;AAEDN,IAAAA,gBAAgB,CAACO,GAAjB,CAAqBJ,KAAK,CAACE,GAA3B;AAEA,UAAMG,KAAK,GAAGd,OAAO,CAACe,IAAR,CAAa;AACzBC,MAAAA,IAAI,EAAE,cADmB;AAEzBC,MAAAA,MAAM,EAAER,KAAK,CAACE,GAFW;AAGzBO,MAAAA,IAAI,EAAE;AAAEf,QAAAA,MAAM,EAAEK;AAAV,OAHmB;AAIzBW,MAAAA,iBAAiB,EAAE;AAJM,KAAb,CAAd;;AAOA,QAAIL,KAAK,CAACM,gBAAV,EAA4B;AAC1B,aAAO,IAAP;AACD;AACF;;AAED,SAAO,KAAP;AACD,CA9CM;;;;AAgDQ,SAASC,kBAAT,CAA4B;AACzCC,EAAAA,QADyC;AAEzCtB,EAAAA,OAFyC;AAGzCC,EAAAA;AAHyC,CAA5B,EAIH;AACV,QAAM;AAAEsB,IAAAA;AAAF,MAAuBC,KAAK,CAACC,UAAN,CAAiBC,iCAAjB,CAA7B;AACA,QAAMjB,KAAK,GAAGe,KAAK,CAACC,UAAN,CAAiBE,+BAAjB,CAAd;AACA,QAAMC,QAAQ,GAAGnB,KAAH,aAAGA,KAAH,uBAAGA,KAAK,CAAEE,GAAxB;AAEAa,EAAAA,KAAK,CAACK,SAAN,CAAgB,MAAM;AACpB,QAAID,QAAJ,EAAc;AACZ,aAAOL,gBAAP,aAAOA,gBAAP,uBAAOA,gBAAgB,CAAG,cAAH,EAAmBK,QAAnB,EAA8BzB,MAAD,IAAY;AAC9D,cAAM2B,KAAK,GAAGR,QAAQ,EAAtB;AAEA,eAAOvB,mBAAmB,CACxBC,OADwB,EAExBC,qBAFwB,EAGxB6B,KAAK,CAAC5B,MAHkB,EAIxBC,MAJwB,CAA1B;AAMD,OATsB,CAAvB;AAUD;AACF,GAbD,EAaG,CAACoB,gBAAD,EAAmBtB,qBAAnB,EAA0CD,OAA1C,EAAmDsB,QAAnD,EAA6DM,QAA7D,CAbH;AAcD","sourcesContent":["import * as React from 'react';\nimport type {\n  NavigationState,\n  Route,\n  NavigationAction,\n} from '@react-navigation/routers';\nimport NavigationBuilderContext, {\n  ChildBeforeRemoveListener,\n} from './NavigationBuilderContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport type { NavigationEventEmitter } from './useEventEmitter';\nimport type { EventMapCore } from './types';\n\ntype Options = {\n  getState: () => NavigationState;\n  emitter: NavigationEventEmitter<EventMapCore<any>>;\n  beforeRemoveListeners: Record<string, ChildBeforeRemoveListener | undefined>;\n};\n\nconst VISITED_ROUTE_KEYS = Symbol('VISITED_ROUTE_KEYS');\n\nexport const shouldPreventRemove = (\n  emitter: NavigationEventEmitter<EventMapCore<any>>,\n  beforeRemoveListeners: Record<string, ChildBeforeRemoveListener | undefined>,\n  routes: Route<string>[],\n  action: NavigationAction\n) => {\n  // Call these in reverse order so last screens handle the event first\n  const reversedRoutes = [...routes].reverse();\n\n  const visitedRouteKeys: Set<string> =\n    // @ts-expect-error: add this property to mark that we've already emitted this action\n    action[VISITED_ROUTE_KEYS] ?? new Set<string>();\n\n  const beforeRemoveAction = {\n    ...action,\n    [VISITED_ROUTE_KEYS]: visitedRouteKeys,\n  };\n\n  for (const route of reversedRoutes) {\n    if (visitedRouteKeys.has(route.key)) {\n      // Skip if we've already emitted this action for this screen\n      continue;\n    }\n\n    // First, we need to check if any child screens want to prevent it\n    const isPrevented = beforeRemoveListeners[route.key]?.(beforeRemoveAction);\n\n    if (isPrevented) {\n      return true;\n    }\n\n    visitedRouteKeys.add(route.key);\n\n    const event = emitter.emit({\n      type: 'beforeRemove',\n      target: route.key,\n      data: { action: beforeRemoveAction },\n      canPreventDefault: true,\n    });\n\n    if (event.defaultPrevented) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nexport default function useOnPreventRemove({\n  getState,\n  emitter,\n  beforeRemoveListeners,\n}: Options) {\n  const { addKeyedListener } = React.useContext(NavigationBuilderContext);\n  const route = React.useContext(NavigationRouteContext);\n  const routeKey = route?.key;\n\n  React.useEffect(() => {\n    if (routeKey) {\n      return addKeyedListener?.('beforeRemove', routeKey, (action) => {\n        const state = getState();\n\n        return shouldPreventRemove(\n          emitter,\n          beforeRemoveListeners,\n          state.routes,\n          action\n        );\n      });\n    }\n  }, [addKeyedListener, beforeRemoveListeners, emitter, getState, routeKey]);\n}\n"]}