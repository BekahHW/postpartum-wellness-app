{"version":3,"sources":["useFocusedListenersChildrenAdapter.tsx"],"names":["useFocusedListenersChildrenAdapter","navigation","focusedListeners","addListener","React","useContext","NavigationBuilderContext","listener","useCallback","callback","isFocused","handled","result","useEffect"],"mappings":";;;;;;;AAAA;;AAEA;;;;;;;;AAWA;;;AAGe,SAASA,kCAAT,CAA4C;AACzDC,EAAAA,UADyD;AAEzDC,EAAAA;AAFyD,CAA5C,EAGH;AACV,QAAM;AAAEC,IAAAA;AAAF,MAAkBC,KAAK,CAACC,UAAN,CAAiBC,iCAAjB,CAAxB;AAEA,QAAMC,QAAQ,GAAGH,KAAK,CAACI,WAAN,CACdC,QAAD,IAA8C;AAC5C,QAAIR,UAAU,CAACS,SAAX,EAAJ,EAA4B;AAC1B,WAAK,MAAMH,QAAX,IAAuBL,gBAAvB,EAAyC;AACvC,cAAM;AAAES,UAAAA,OAAF;AAAWC,UAAAA;AAAX,YAAsBL,QAAQ,CAACE,QAAD,CAApC;;AAEA,YAAIE,OAAJ,EAAa;AACX,iBAAO;AAAEA,YAAAA,OAAF;AAAWC,YAAAA;AAAX,WAAP;AACD;AACF;;AAED,aAAO;AAAED,QAAAA,OAAO,EAAE,IAAX;AAAiBC,QAAAA,MAAM,EAAEH,QAAQ,CAACR,UAAD;AAAjC,OAAP;AACD,KAVD,MAUO;AACL,aAAO;AAAEU,QAAAA,OAAO,EAAE,KAAX;AAAkBC,QAAAA,MAAM,EAAE;AAA1B,OAAP;AACD;AACF,GAfc,EAgBf,CAACV,gBAAD,EAAmBD,UAAnB,CAhBe,CAAjB;AAmBAG,EAAAA,KAAK,CAACS,SAAN,CAAgB,MAAMV,WAAN,aAAMA,WAAN,uBAAMA,WAAW,CAAG,OAAH,EAAYI,QAAZ,CAAjC,EAAwD,CACtDJ,WADsD,EAEtDI,QAFsD,CAAxD;AAID","sourcesContent":["import * as React from 'react';\nimport type { ParamListBase } from '@react-navigation/routers';\nimport NavigationBuilderContext, {\n  FocusedNavigationCallback,\n  FocusedNavigationListener,\n} from './NavigationBuilderContext';\nimport type { NavigationHelpers } from './types';\n\ntype Options = {\n  navigation: NavigationHelpers<ParamListBase>;\n  focusedListeners: FocusedNavigationListener[];\n};\n\n/**\n * Hook for passing focus callback to children\n */\nexport default function useFocusedListenersChildrenAdapter({\n  navigation,\n  focusedListeners,\n}: Options) {\n  const { addListener } = React.useContext(NavigationBuilderContext);\n\n  const listener = React.useCallback(\n    (callback: FocusedNavigationCallback<any>) => {\n      if (navigation.isFocused()) {\n        for (const listener of focusedListeners) {\n          const { handled, result } = listener(callback);\n\n          if (handled) {\n            return { handled, result };\n          }\n        }\n\n        return { handled: true, result: callback(navigation) };\n      } else {\n        return { handled: false, result: null };\n      }\n    },\n    [focusedListeners, navigation]\n  );\n\n  React.useEffect(() => addListener?.('focus', listener), [\n    addListener,\n    listener,\n  ]);\n}\n"]}