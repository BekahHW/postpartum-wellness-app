{"version":3,"sources":["CardStack.tsx"],"names":["EPSILON","FALLBACK_DESCRIPTOR","Object","freeze","options","getHeaderHeights","routes","insets","descriptors","layout","previous","reduce","acc","curr","key","style","StyleSheet","flatten","headerStyle","height","safeAreaInsets","headerStatusBarHeight","top","getDistanceFromOptions","mode","descriptor","gestureDirection","ModalTransition","DefaultTransition","getProgressFromGesture","gesture","distance","width","Math","max","interpolate","inputRange","outputRange","CardStack","React","Component","getDerivedStateFromProps","props","state","gestures","animationEnabled","Animated","Value","openingRouteKeys","includes","scenes","map","route","index","self","previousRoute","nextRoute","oldScene","currentGesture","previousGesture","undefined","nextGesture","nextDescriptor","previousDescriptor","scene","progress","current","next","__memo","every","it","i","headerHeights","constructor","e","nativeEvent","setState","previousHeight","getPreviousRoute","previousScene","find","Dimensions","get","render","closingRouteKeys","onOpenRoute","onCloseRoute","getGesturesEnabled","renderHeader","renderScene","headerMode","onTransitionStart","onTransitionEnd","onPageChangeStart","onPageChangeConfirm","onPageChangeCancel","onGestureStart","onGestureEnd","onGestureCancel","focusedRoute","focusedDescriptor","focusedOptions","defaultTransitionPreset","headerStyleInterpolator","forNoAnimationHeader","right","bottom","left","isScreensEnabled","Platform","OS","isParentHeaderShown","isFloatHeaderAbsolute","slice","some","headerTransparent","headerShown","floatingHeader","getPreviousScene","getFocusedRoute","onContentHeightChange","handleHeaderLayout","styleInterpolator","styles","floating","absolute","container","handleLayout","focused","isScreenActive","extrapolate","cardShadowEnabled","cardOverlayEnabled","cardOverlay","cardStyle","gestureResponseDistance","gestureVelocityImpact","transitionSpec","cardStyleInterpolator","forNoAnimationCard","transitionConfig","length","nextScene","safeAreaInsetTop","safeAreaInsetRight","safeAreaInsetBottom","safeAreaInsetLeft","headerHeight","absoluteFill","create","flex","position","zIndex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  StyleSheet,\n  LayoutChangeEvent,\n  Dimensions,\n  Platform,\n} from 'react-native';\nimport type { EdgeInsets } from 'react-native-safe-area-context';\nimport type { Route, StackNavigationState } from '@react-navigation/native';\n\nimport { MaybeScreenContainer, MaybeScreen } from '../Screens';\nimport { getDefaultHeaderHeight } from '../Header/HeaderSegment';\nimport type { Props as HeaderContainerProps } from '../Header/HeaderContainer';\nimport CardContainer from './CardContainer';\nimport {\n  DefaultTransition,\n  ModalTransition,\n} from '../../TransitionConfigs/TransitionPresets';\nimport { forNoAnimation as forNoAnimationHeader } from '../../TransitionConfigs/HeaderStyleInterpolators';\nimport { forNoAnimation as forNoAnimationCard } from '../../TransitionConfigs/CardStyleInterpolators';\nimport HeaderShownContext from '../../utils/HeaderShownContext';\nimport getDistanceForDirection from '../../utils/getDistanceForDirection';\nimport type {\n  Layout,\n  StackHeaderMode,\n  StackCardMode,\n  Scene,\n  StackDescriptorMap,\n  StackNavigationOptions,\n  StackDescriptor,\n} from '../../types';\n\ntype GestureValues = {\n  [key: string]: Animated.Value;\n};\n\ntype Props = {\n  mode: StackCardMode;\n  insets: EdgeInsets;\n  state: StackNavigationState;\n  descriptors: StackDescriptorMap;\n  routes: Route<string>[];\n  openingRouteKeys: string[];\n  closingRouteKeys: string[];\n  onOpenRoute: (props: { route: Route<string> }) => void;\n  onCloseRoute: (props: { route: Route<string> }) => void;\n  getPreviousRoute: (props: {\n    route: Route<string>;\n  }) => Route<string> | undefined;\n  getGesturesEnabled: (props: { route: Route<string> }) => boolean;\n  renderHeader: (props: HeaderContainerProps) => React.ReactNode;\n  renderScene: (props: { route: Route<string> }) => React.ReactNode;\n  headerMode: StackHeaderMode;\n  onTransitionStart: (\n    props: { route: Route<string> },\n    closing: boolean\n  ) => void;\n  onTransitionEnd: (props: { route: Route<string> }, closing: boolean) => void;\n  onPageChangeStart?: () => void;\n  onPageChangeConfirm?: () => void;\n  onPageChangeCancel?: () => void;\n  onGestureStart?: (props: { route: Route<string> }) => void;\n  onGestureEnd?: (props: { route: Route<string> }) => void;\n  onGestureCancel?: (props: { route: Route<string> }) => void;\n};\n\ntype State = {\n  routes: Route<string>[];\n  descriptors: StackDescriptorMap;\n  scenes: Scene<Route<string>>[];\n  gestures: GestureValues;\n  layout: Layout;\n  headerHeights: Record<string, number>;\n};\n\nconst EPSILON = 0.01;\n\nconst FALLBACK_DESCRIPTOR = Object.freeze({ options: {} });\n\nconst getHeaderHeights = (\n  routes: Route<string>[],\n  insets: EdgeInsets,\n  descriptors: StackDescriptorMap,\n  layout: Layout,\n  previous: Record<string, number>\n) => {\n  return routes.reduce<Record<string, number>>((acc, curr) => {\n    const { options = {} } = descriptors[curr.key] || {};\n    const style: any = StyleSheet.flatten(options.headerStyle || {});\n\n    const height =\n      typeof style.height === 'number' ? style.height : previous[curr.key];\n\n    const safeAreaInsets = {\n      ...insets,\n      ...options.safeAreaInsets,\n    };\n\n    const { headerStatusBarHeight = safeAreaInsets.top } = options;\n\n    acc[curr.key] =\n      typeof height === 'number'\n        ? height\n        : getDefaultHeaderHeight(layout, headerStatusBarHeight);\n\n    return acc;\n  }, {});\n};\n\nconst getDistanceFromOptions = (\n  mode: StackCardMode,\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const {\n    gestureDirection = mode === 'modal'\n      ? ModalTransition.gestureDirection\n      : DefaultTransition.gestureDirection,\n  } = descriptor?.options || {};\n\n  return getDistanceForDirection(layout, gestureDirection);\n};\n\nconst getProgressFromGesture = (\n  mode: StackCardMode,\n  gesture: Animated.Value,\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const distance = getDistanceFromOptions(\n    mode,\n    {\n      // Make sure that we have a non-zero distance, otherwise there will be incorrect progress\n      // This causes blank screen on web if it was previously inside container with display: none\n      width: Math.max(1, layout.width),\n      height: Math.max(1, layout.height),\n    },\n    descriptor\n  );\n\n  if (distance > 0) {\n    return gesture.interpolate({\n      inputRange: [0, distance],\n      outputRange: [1, 0],\n    });\n  }\n\n  return gesture.interpolate({\n    inputRange: [distance, 0],\n    outputRange: [0, 1],\n  });\n};\n\nexport default class CardStack extends React.Component<Props, State> {\n  static getDerivedStateFromProps(props: Props, state: State) {\n    if (\n      props.routes === state.routes &&\n      props.descriptors === state.descriptors\n    ) {\n      return null;\n    }\n\n    const gestures = props.routes.reduce<GestureValues>((acc, curr) => {\n      const descriptor = props.descriptors[curr.key];\n      const { animationEnabled } = descriptor?.options || {};\n\n      acc[curr.key] =\n        state.gestures[curr.key] ||\n        new Animated.Value(\n          props.openingRouteKeys.includes(curr.key) &&\n          animationEnabled !== false\n            ? getDistanceFromOptions(props.mode, state.layout, descriptor)\n            : 0\n        );\n\n      return acc;\n    }, {});\n\n    return {\n      routes: props.routes,\n      scenes: props.routes.map((route, index, self) => {\n        const previousRoute = self[index - 1];\n        const nextRoute = self[index + 1];\n\n        const oldScene = state.scenes[index];\n\n        const currentGesture = gestures[route.key];\n        const previousGesture = previousRoute\n          ? gestures[previousRoute.key]\n          : undefined;\n        const nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\n\n        const descriptor =\n          props.descriptors[route.key] ||\n          state.descriptors[route.key] ||\n          (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\n\n        const nextDescriptor =\n          props.descriptors[nextRoute?.key] ||\n          state.descriptors[nextRoute?.key];\n\n        const previousDescriptor =\n          props.descriptors[previousRoute?.key] ||\n          state.descriptors[previousRoute?.key];\n\n        const scene = {\n          route,\n          descriptor,\n          progress: {\n            current: getProgressFromGesture(\n              props.mode,\n              currentGesture,\n              state.layout,\n              descriptor\n            ),\n            next: nextGesture\n              ? getProgressFromGesture(\n                  props.mode,\n                  nextGesture,\n                  state.layout,\n                  nextDescriptor\n                )\n              : undefined,\n            previous: previousGesture\n              ? getProgressFromGesture(\n                  props.mode,\n                  previousGesture,\n                  state.layout,\n                  previousDescriptor\n                )\n              : undefined,\n          },\n          __memo: [\n            route,\n            state.layout,\n            descriptor,\n            nextDescriptor,\n            previousDescriptor,\n            currentGesture,\n            nextGesture,\n            previousGesture,\n          ],\n        };\n\n        if (\n          oldScene &&\n          scene.__memo.every((it, i) => {\n            // @ts-expect-error: we haven't added __memo to the annotation to prevent usage elsewhere\n            return oldScene.__memo[i] === it;\n          })\n        ) {\n          return oldScene;\n        }\n\n        return scene;\n      }),\n      gestures,\n      descriptors: props.descriptors,\n      headerHeights: getHeaderHeights(\n        props.routes,\n        props.insets,\n        state.descriptors,\n        state.layout,\n        state.headerHeights\n      ),\n    };\n  }\n\n  constructor(props: Props) {\n    super(props);\n\n    const { height = 0, width = 0 } = Dimensions.get('window');\n\n    this.state = {\n      routes: [],\n      scenes: [],\n      gestures: {},\n      layout: { height, width },\n      descriptors: this.props.descriptors,\n      // Used when card's header is null and mode is float to make transition\n      // between screens with headers and those without headers smooth.\n      // This is not a great heuristic here. We don't know synchronously\n      // on mount what the header height is so we have just used the most\n      // common cases here.\n      headerHeights: {},\n    };\n  }\n\n  private handleLayout = (e: LayoutChangeEvent) => {\n    const { height, width } = e.nativeEvent.layout;\n\n    const layout = { width, height };\n\n    this.setState((state, props) => {\n      if (height === state.layout.height && width === state.layout.width) {\n        return null;\n      }\n\n      return {\n        layout,\n        headerHeights: getHeaderHeights(\n          props.routes,\n          props.insets,\n          state.descriptors,\n          layout,\n          state.headerHeights\n        ),\n      };\n    });\n  };\n\n  private handleHeaderLayout = ({\n    route,\n    height,\n  }: {\n    route: Route<string>;\n    height: number;\n  }) => {\n    this.setState(({ headerHeights }) => {\n      const previousHeight = headerHeights[route.key];\n\n      if (previousHeight === height) {\n        return null;\n      }\n\n      return {\n        headerHeights: {\n          ...headerHeights,\n          [route.key]: height,\n        },\n      };\n    });\n  };\n\n  private getFocusedRoute = () => {\n    const { state } = this.props;\n\n    return state.routes[state.index];\n  };\n\n  private getPreviousScene = ({ route }: { route: Route<string> }) => {\n    const { getPreviousRoute } = this.props;\n    const { scenes } = this.state;\n\n    const previousRoute = getPreviousRoute({ route });\n\n    if (previousRoute) {\n      const previousScene = scenes.find(\n        (scene) => scene.route.key === previousRoute.key\n      );\n\n      return previousScene;\n    }\n\n    return undefined;\n  };\n\n  render() {\n    const {\n      mode,\n      insets,\n      descriptors,\n      state,\n      routes,\n      closingRouteKeys,\n      onOpenRoute,\n      onCloseRoute,\n      getGesturesEnabled,\n      renderHeader,\n      renderScene,\n      headerMode,\n      onTransitionStart,\n      onTransitionEnd,\n      onPageChangeStart,\n      onPageChangeConfirm,\n      onPageChangeCancel,\n      onGestureStart,\n      onGestureEnd,\n      onGestureCancel,\n    } = this.props;\n\n    const { scenes, layout, gestures, headerHeights } = this.state;\n\n    const focusedRoute = state.routes[state.index];\n    const focusedDescriptor = descriptors[focusedRoute.key];\n    const focusedOptions = focusedDescriptor ? focusedDescriptor.options : {};\n\n    let defaultTransitionPreset =\n      mode === 'modal' ? ModalTransition : DefaultTransition;\n\n    if (headerMode === 'screen') {\n      defaultTransitionPreset = {\n        ...defaultTransitionPreset,\n        headerStyleInterpolator: forNoAnimationHeader,\n      };\n    }\n\n    const {\n      top = insets.top,\n      right = insets.right,\n      bottom = insets.bottom,\n      left = insets.left,\n    } = focusedOptions.safeAreaInsets || {};\n\n    // Screens is buggy on iOS and web, so we only enable it on Android\n    // For modals, usually we want the screen underneath to be visible, so also disable it there\n    const isScreensEnabled = Platform.OS !== 'ios' && mode !== 'modal';\n\n    return (\n      <HeaderShownContext.Consumer>\n        {(isParentHeaderShown) => {\n          const isFloatHeaderAbsolute =\n            headerMode === 'float'\n              ? this.state.scenes.slice(-2).some((scene) => {\n                  const { descriptor } = scene;\n                  const options = descriptor ? descriptor.options : {};\n                  const {\n                    headerTransparent,\n                    headerShown = isParentHeaderShown === false,\n                  } = options;\n\n                  if (headerTransparent || headerShown === false) {\n                    return true;\n                  }\n\n                  return false;\n                })\n              : false;\n\n          const floatingHeader =\n            headerMode === 'float' ? (\n              <React.Fragment key=\"header\">\n                {renderHeader({\n                  mode: 'float',\n                  layout,\n                  insets: { top, right, bottom, left },\n                  scenes,\n                  getPreviousScene: this.getPreviousScene,\n                  getFocusedRoute: this.getFocusedRoute,\n                  onContentHeightChange: this.handleHeaderLayout,\n                  gestureDirection:\n                    focusedOptions.gestureDirection !== undefined\n                      ? focusedOptions.gestureDirection\n                      : defaultTransitionPreset.gestureDirection,\n                  styleInterpolator:\n                    focusedOptions.headerStyleInterpolator !== undefined\n                      ? focusedOptions.headerStyleInterpolator\n                      : defaultTransitionPreset.headerStyleInterpolator,\n                  style: [\n                    styles.floating,\n                    isFloatHeaderAbsolute && styles.absolute,\n                  ],\n                })}\n              </React.Fragment>\n            ) : null;\n\n          return (\n            <React.Fragment>\n              {isFloatHeaderAbsolute ? null : floatingHeader}\n              <MaybeScreenContainer\n                enabled={isScreensEnabled}\n                style={styles.container}\n                onLayout={this.handleLayout}\n              >\n                {routes.map((route, index, self) => {\n                  const focused = focusedRoute.key === route.key;\n                  const gesture = gestures[route.key];\n                  const scene = scenes[index];\n\n                  const isScreenActive = scene.progress.next\n                    ? scene.progress.next.interpolate({\n                        inputRange: [0, 1 - EPSILON, 1],\n                        outputRange: [1, 1, 0],\n                        extrapolate: 'clamp',\n                      })\n                    : 1;\n\n                  const {\n                    safeAreaInsets,\n                    headerShown = isParentHeaderShown === false,\n                    headerTransparent,\n                    cardShadowEnabled,\n                    cardOverlayEnabled,\n                    cardOverlay,\n                    cardStyle,\n                    animationEnabled,\n                    gestureResponseDistance,\n                    gestureVelocityImpact,\n                    gestureDirection = defaultTransitionPreset.gestureDirection,\n                    transitionSpec = defaultTransitionPreset.transitionSpec,\n                    cardStyleInterpolator = animationEnabled === false\n                      ? forNoAnimationCard\n                      : defaultTransitionPreset.cardStyleInterpolator,\n                    headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator,\n                  } = scene.descriptor\n                    ? scene.descriptor.options\n                    : ({} as StackNavigationOptions);\n\n                  let transitionConfig = {\n                    gestureDirection,\n                    transitionSpec,\n                    cardStyleInterpolator,\n                    headerStyleInterpolator,\n                  };\n\n                  // When a screen is not the last, it should use next screen's transition config\n                  // Many transitions also animate the previous screen, so using 2 different transitions doesn't look right\n                  // For example combining a slide and a modal transition would look wrong otherwise\n                  // With this approach, combining different transition styles in the same navigator mostly looks right\n                  // This will still be broken when 2 transitions have different idle state (e.g. modal presentation),\n                  // but majority of the transitions look alright\n                  if (index !== self.length - 1) {\n                    const nextScene = scenes[index + 1];\n\n                    if (nextScene) {\n                      const {\n                        animationEnabled,\n                        gestureDirection = defaultTransitionPreset.gestureDirection,\n                        transitionSpec = defaultTransitionPreset.transitionSpec,\n                        cardStyleInterpolator = animationEnabled === false\n                          ? forNoAnimationCard\n                          : defaultTransitionPreset.cardStyleInterpolator,\n                        headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator,\n                      } = nextScene.descriptor\n                        ? nextScene.descriptor.options\n                        : ({} as StackNavigationOptions);\n\n                      transitionConfig = {\n                        gestureDirection,\n                        transitionSpec,\n                        cardStyleInterpolator,\n                        headerStyleInterpolator,\n                      };\n                    }\n                  }\n\n                  const {\n                    top: safeAreaInsetTop = insets.top,\n                    right: safeAreaInsetRight = insets.right,\n                    bottom: safeAreaInsetBottom = insets.bottom,\n                    left: safeAreaInsetLeft = insets.left,\n                  } = safeAreaInsets || {};\n\n                  const headerHeight =\n                    headerMode !== 'none' && headerShown !== false\n                      ? headerHeights[route.key]\n                      : 0;\n\n                  return (\n                    <MaybeScreen\n                      key={route.key}\n                      style={StyleSheet.absoluteFill}\n                      enabled={isScreensEnabled}\n                      active={isScreenActive}\n                      pointerEvents=\"box-none\"\n                    >\n                      <CardContainer\n                        index={index}\n                        active={index === self.length - 1}\n                        focused={focused}\n                        closing={closingRouteKeys.includes(route.key)}\n                        layout={layout}\n                        gesture={gesture}\n                        scene={scene}\n                        safeAreaInsetTop={safeAreaInsetTop}\n                        safeAreaInsetRight={safeAreaInsetRight}\n                        safeAreaInsetBottom={safeAreaInsetBottom}\n                        safeAreaInsetLeft={safeAreaInsetLeft}\n                        cardOverlay={cardOverlay}\n                        cardOverlayEnabled={cardOverlayEnabled}\n                        cardShadowEnabled={cardShadowEnabled}\n                        cardStyle={cardStyle}\n                        onPageChangeStart={onPageChangeStart}\n                        onPageChangeConfirm={onPageChangeConfirm}\n                        onPageChangeCancel={onPageChangeCancel}\n                        onGestureStart={onGestureStart}\n                        onGestureCancel={onGestureCancel}\n                        onGestureEnd={onGestureEnd}\n                        gestureResponseDistance={gestureResponseDistance}\n                        headerHeight={headerHeight}\n                        onHeaderHeightChange={this.handleHeaderLayout}\n                        getPreviousScene={this.getPreviousScene}\n                        getFocusedRoute={this.getFocusedRoute}\n                        mode={mode}\n                        headerMode={headerMode}\n                        headerShown={headerShown}\n                        hasAbsoluteHeader={\n                          isFloatHeaderAbsolute && !headerTransparent\n                        }\n                        renderHeader={renderHeader}\n                        renderScene={renderScene}\n                        onOpenRoute={onOpenRoute}\n                        onCloseRoute={onCloseRoute}\n                        onTransitionStart={onTransitionStart}\n                        onTransitionEnd={onTransitionEnd}\n                        gestureEnabled={\n                          index !== 0 && getGesturesEnabled({ route })\n                        }\n                        gestureVelocityImpact={gestureVelocityImpact}\n                        {...transitionConfig}\n                      />\n                    </MaybeScreen>\n                  );\n                })}\n              </MaybeScreenContainer>\n              {isFloatHeaderAbsolute ? floatingHeader : null}\n            </React.Fragment>\n          );\n        }}\n      </HeaderShownContext.Consumer>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  absolute: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n  },\n  floating: {\n    zIndex: 1,\n  },\n});\n"]}