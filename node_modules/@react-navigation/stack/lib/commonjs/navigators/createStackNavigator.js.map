{"version":3,"sources":["createStackNavigator.tsx"],"names":["StackNavigator","initialRouteName","children","screenOptions","rest","defaultOptions","gestureEnabled","Platform","OS","animationEnabled","state","descriptors","navigation","StackRouter","args","React","useEffect","addListener","e","isFocused","requestAnimationFrame","index","defaultPrevented","dispatch","StackActions","popToTop","target","key"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAUA;;;;;;;;;;;;;;;;;;;;AAWA,SAASA,cAAT,OAKU;AAAA,MALc;AACtBC,IAAAA,gBADsB;AAEtBC,IAAAA,QAFsB;AAGtBC,IAAAA;AAHsB,GAKd;AAAA,MADLC,IACK;;AACR,QAAMC,cAAc,GAAG;AACrBC,IAAAA,cAAc,EAAEC,sBAASC,EAAT,KAAgB,KADX;AAErBC,IAAAA,gBAAgB,EACdF,sBAASC,EAAT,KAAgB,KAAhB,IACAD,sBAASC,EAAT,KAAgB,SADhB,IAEAD,sBAASC,EAAT,KAAgB;AALG,GAAvB;AAQA,QAAM;AAAEE,IAAAA,KAAF;AAASC,IAAAA,WAAT;AAAsBC,IAAAA;AAAtB,MAAqC,kCAKzCC,mBALyC,EAK5B;AACbZ,IAAAA,gBADa;AAEbC,IAAAA,QAFa;AAGbC,IAAAA,aAAa,EACX,OAAOA,aAAP,KAAyB,UAAzB,GACI,CAAC,GAAGW,IAAJ,qCACKT,cADL,GAEKF,aAAa,CAAC,GAAGW,IAAJ,CAFlB,CADJ,mCAMST,cANT,GAOSF,aAPT;AAJW,GAL4B,CAA3C;AAoBAY,EAAAA,KAAK,CAACC,SAAN,CACE,MACEJ,UAAU,CAACK,WAAX,IACAL,UAAU,CAACK,WAAX,CAAuB,UAAvB,EAAoCC,CAAD,IAAO;AACxC,UAAMC,SAAS,GAAGP,UAAU,CAACO,SAAX,EAAlB,CADwC,CAGxC;AACA;;AACAC,IAAAA,qBAAqB,CAAC,MAAM;AAC1B,UACEV,KAAK,CAACW,KAAN,GAAc,CAAd,IACAF,SADA,IAEA,CAAED,CAAD,CAAkCI,gBAHrC,EAIE;AACA;AACA;AACAV,QAAAA,UAAU,CAACW,QAAX,iCACKC,qBAAaC,QAAb,EADL;AAEEC,UAAAA,MAAM,EAAEhB,KAAK,CAACiB;AAFhB;AAID;AACF,KAboB,CAArB;AAcD,GAnBD,CAHJ,EAuBE,CAACf,UAAD,EAAaF,KAAK,CAACW,KAAnB,EAA0BX,KAAK,CAACiB,GAAhC,CAvBF;AA0BA,sBACE,oBAAC,kBAAD,eACMvB,IADN;AAEE,IAAA,KAAK,EAAEM,KAFT;AAGE,IAAA,WAAW,EAAEC,WAHf;AAIE,IAAA,UAAU,EAAEC;AAJd,KADF;AAQD;;eAEc,oCAKbZ,cALa,C","sourcesContent":["import * as React from 'react';\nimport { Platform } from 'react-native';\nimport {\n  useNavigationBuilder,\n  createNavigatorFactory,\n  DefaultNavigatorOptions,\n  EventArg,\n  StackRouter,\n  StackRouterOptions,\n  StackNavigationState,\n  StackActions,\n} from '@react-navigation/native';\nimport StackView from '../views/Stack/StackView';\nimport type {\n  StackNavigationConfig,\n  StackNavigationOptions,\n  StackNavigationEventMap,\n} from '../types';\n\ntype Props = DefaultNavigatorOptions<StackNavigationOptions> &\n  StackRouterOptions &\n  StackNavigationConfig;\n\nfunction StackNavigator({\n  initialRouteName,\n  children,\n  screenOptions,\n  ...rest\n}: Props) {\n  const defaultOptions = {\n    gestureEnabled: Platform.OS === 'ios',\n    animationEnabled:\n      Platform.OS !== 'web' &&\n      Platform.OS !== 'windows' &&\n      Platform.OS !== 'macos',\n  };\n\n  const { state, descriptors, navigation } = useNavigationBuilder<\n    StackNavigationState,\n    StackRouterOptions,\n    StackNavigationOptions,\n    StackNavigationEventMap\n  >(StackRouter, {\n    initialRouteName,\n    children,\n    screenOptions:\n      typeof screenOptions === 'function'\n        ? (...args) => ({\n            ...defaultOptions,\n            ...screenOptions(...args),\n          })\n        : {\n            ...defaultOptions,\n            ...screenOptions,\n          },\n  });\n\n  React.useEffect(\n    () =>\n      navigation.addListener &&\n      navigation.addListener('tabPress', (e) => {\n        const isFocused = navigation.isFocused();\n\n        // Run the operation in the next frame so we're sure all listeners have been run\n        // This is necessary to know if preventDefault() has been called\n        requestAnimationFrame(() => {\n          if (\n            state.index > 0 &&\n            isFocused &&\n            !(e as EventArg<'tabPress', true>).defaultPrevented\n          ) {\n            // When user taps on already focused tab and we're inside the tab,\n            // reset the stack to replicate native behaviour\n            navigation.dispatch({\n              ...StackActions.popToTop(),\n              target: state.key,\n            });\n          }\n        });\n      }),\n    [navigation, state.index, state.key]\n  );\n\n  return (\n    <StackView\n      {...rest}\n      state={state}\n      descriptors={descriptors}\n      navigation={navigation}\n    />\n  );\n}\n\nexport default createNavigatorFactory<\n  StackNavigationState,\n  StackNavigationOptions,\n  StackNavigationEventMap,\n  typeof StackNavigator\n>(StackNavigator);\n"]}