{"version":3,"sources":["HeaderContainer.tsx"],"names":["React","View","StyleSheet","NavigationContext","NavigationRouteContext","Header","forSlideLeft","forSlideUp","forNoAnimation","forSlideRight","HeaderShownContext","PreviousSceneContext","HeaderContainer","mode","scenes","layout","insets","getPreviousScene","getFocusedRoute","onContentHeightChange","gestureDirection","styleInterpolator","style","focusedRoute","isParentHeaderShown","useContext","parentPreviousScene","slice","map","scene","i","self","length","header","headerShown","headerTransparent","descriptor","options","isFocused","key","route","previous","previousScene","nextScene","previousHeaderShown","nextHeaderShown","isHeaderStatic","props","navigation","e","height","nativeEvent","undefined","styles","create","position","top","left","right"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, StyleSheet, StyleProp, ViewStyle } from 'react-native';\nimport {\n  NavigationContext,\n  NavigationRouteContext,\n  Route,\n  ParamListBase,\n} from '@react-navigation/native';\nimport type { EdgeInsets } from 'react-native-safe-area-context';\n\nimport Header from './Header';\nimport {\n  forSlideLeft,\n  forSlideUp,\n  forNoAnimation,\n  forSlideRight,\n} from '../../TransitionConfigs/HeaderStyleInterpolators';\nimport HeaderShownContext from '../../utils/HeaderShownContext';\nimport PreviousSceneContext from '../../utils/PreviousSceneContext';\nimport type {\n  Layout,\n  Scene,\n  StackHeaderStyleInterpolator,\n  StackNavigationProp,\n  GestureDirection,\n} from '../../types';\n\nexport type Props = {\n  mode: 'float' | 'screen';\n  layout: Layout;\n  insets: EdgeInsets;\n  scenes: (Scene<Route<string>> | undefined)[];\n  getPreviousScene: (props: {\n    route: Route<string>;\n  }) => Scene<Route<string>> | undefined;\n  getFocusedRoute: () => Route<string>;\n  onContentHeightChange?: (props: {\n    route: Route<string>;\n    height: number;\n  }) => void;\n  styleInterpolator: StackHeaderStyleInterpolator;\n  gestureDirection: GestureDirection;\n  style?: StyleProp<ViewStyle>;\n};\n\nexport default function HeaderContainer({\n  mode,\n  scenes,\n  layout,\n  insets,\n  getPreviousScene,\n  getFocusedRoute,\n  onContentHeightChange,\n  gestureDirection,\n  styleInterpolator,\n  style,\n}: Props) {\n  const focusedRoute = getFocusedRoute();\n  const isParentHeaderShown = React.useContext(HeaderShownContext);\n  const parentPreviousScene = React.useContext(PreviousSceneContext);\n\n  return (\n    <View pointerEvents=\"box-none\" style={style}>\n      {scenes.slice(-3).map((scene, i, self) => {\n        if ((mode === 'screen' && i !== self.length - 1) || !scene) {\n          return null;\n        }\n\n        const {\n          header,\n          headerShown = isParentHeaderShown === false,\n          headerTransparent,\n        } = scene.descriptor.options || {};\n\n        if (!headerShown) {\n          return null;\n        }\n\n        const isFocused = focusedRoute.key === scene.route.key;\n        const previous =\n          getPreviousScene({ route: scene.route }) ?? parentPreviousScene;\n\n        // If the screen is next to a headerless screen, we need to make the header appear static\n        // This makes the header look like it's moving with the screen\n        const previousScene = self[i - 1];\n        const nextScene = self[i + 1];\n\n        const {\n          headerShown: previousHeaderShown = isParentHeaderShown === false,\n        } = previousScene?.descriptor.options || {};\n\n        const { headerShown: nextHeaderShown = isParentHeaderShown === false } =\n          nextScene?.descriptor.options || {};\n\n        const isHeaderStatic =\n          (previousHeaderShown === false &&\n            // We still need to animate when coming back from next scene\n            // A hacky way to check this is if the next scene exists\n            !nextScene) ||\n          nextHeaderShown === false;\n\n        const props = {\n          mode,\n          layout,\n          insets,\n          scene,\n          previous,\n          navigation: scene.descriptor.navigation as StackNavigationProp<\n            ParamListBase\n          >,\n          styleInterpolator:\n            mode === 'float'\n              ? isHeaderStatic\n                ? gestureDirection === 'vertical' ||\n                  gestureDirection === 'vertical-inverted'\n                  ? forSlideUp\n                  : gestureDirection === 'horizontal-inverted'\n                  ? forSlideRight\n                  : forSlideLeft\n                : styleInterpolator\n              : forNoAnimation,\n        };\n\n        return (\n          <NavigationContext.Provider\n            key={scene.route.key}\n            value={scene.descriptor.navigation}\n          >\n            <NavigationRouteContext.Provider value={scene.route}>\n              <View\n                onLayout={\n                  onContentHeightChange\n                    ? (e) =>\n                        onContentHeightChange({\n                          route: scene.route,\n                          height: e.nativeEvent.layout.height,\n                        })\n                    : undefined\n                }\n                pointerEvents={isFocused ? 'box-none' : 'none'}\n                accessibilityElementsHidden={!isFocused}\n                importantForAccessibility={\n                  isFocused ? 'auto' : 'no-hide-descendants'\n                }\n                style={\n                  // Avoid positioning the focused header absolutely\n                  // Otherwise accessibility tools don't seem to be able to find it\n                  (mode === 'float' && !isFocused) || headerTransparent\n                    ? styles.header\n                    : null\n                }\n              >\n                {header !== undefined ? header(props) : <Header {...props} />}\n              </View>\n            </NavigationRouteContext.Provider>\n          </NavigationContext.Provider>\n        );\n      })}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  header: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n  },\n});\n"]}