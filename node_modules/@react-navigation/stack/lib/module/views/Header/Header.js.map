{"version":3,"sources":["Header.tsx"],"names":["React","StackActions","HeaderSegment","HeaderTitle","debounce","memo","Header","props","scene","previous","layout","insets","navigation","styleInterpolator","options","descriptor","title","headerTitle","undefined","route","name","leftLabel","headerBackTitle","o","goBack","useCallback","isFocused","canGoBack","dispatch","pop","source","key"],"mappings":";;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,YAAT,QAA6B,0BAA7B;AAEA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,QAAP,MAAqB,sBAArB;AAGA,4BAAeJ,KAAK,CAACK,IAAN,CAAW,SAASC,MAAT,CAAgBC,KAAhB,EAAyC;AACjE,QAAM;AACJC,IAAAA,KADI;AAEJC,IAAAA,QAFI;AAGJC,IAAAA,MAHI;AAIJC,IAAAA,MAJI;AAKJC,IAAAA,UALI;AAMJC,IAAAA;AANI,MAOFN,KAPJ;AAQA,QAAM;AAAEO,IAAAA;AAAF,MAAcN,KAAK,CAACO,UAA1B;AACA,QAAMC,KAAK,GACT,OAAOF,OAAO,CAACG,WAAf,KAA+B,UAA/B,IACAH,OAAO,CAACG,WAAR,KAAwBC,SADxB,GAEIJ,OAAO,CAACG,WAFZ,GAGIH,OAAO,CAACE,KAAR,KAAkBE,SAAlB,GACAJ,OAAO,CAACE,KADR,GAEAR,KAAK,CAACW,KAAN,CAAYC,IANlB;AAQA,MAAIC,SAAJ,CAlBiE,CAoBjE;AACA;;AACA,MAAIP,OAAO,CAACQ,eAAR,KAA4BJ,SAAhC,EAA2C;AACzCG,IAAAA,SAAS,GAAGP,OAAO,CAACQ,eAApB;AACD,GAFD,MAEO,IAAIb,QAAJ,EAAc;AACnB,UAAMc,CAAC,GAAGd,QAAQ,CAACM,UAAT,CAAoBD,OAA9B;AAEAO,IAAAA,SAAS,GACP,OAAOE,CAAC,CAACN,WAAT,KAAyB,UAAzB,IAAuCM,CAAC,CAACN,WAAF,KAAkBC,SAAzD,GACIK,CAAC,CAACN,WADN,GAEIM,CAAC,CAACP,KAAF,KAAYE,SAAZ,GACAK,CAAC,CAACP,KADF,GAEAP,QAAQ,CAACU,KAAT,CAAeC,IALrB;AAMD,GAjCgE,CAmCjE;;;AACA,QAAMI,MAAM,GAAGxB,KAAK,CAACyB,WAAN,CACbrB,QAAQ,CAAC,MAAM;AACb,QAAIQ,UAAU,CAACc,SAAX,MAA0Bd,UAAU,CAACe,SAAX,EAA9B,EAAsD;AACpDf,MAAAA,UAAU,CAACgB,QAAX,iCACK3B,YAAY,CAAC4B,GAAb,EADL;AAEEC,QAAAA,MAAM,EAAEtB,KAAK,CAACW,KAAN,CAAYY;AAFtB;AAID;AACF,GAPO,EAOL,EAPK,CADK,EASb,CAACnB,UAAD,EAAaJ,KAAK,CAACW,KAAN,CAAYY,GAAzB,CATa,CAAf;AAYA,sBACE,oBAAC,aAAD,eACMjB,OADN;AAEE,IAAA,MAAM,EAAEH,MAFV;AAGE,IAAA,MAAM,EAAED,MAHV;AAIE,IAAA,KAAK,EAAEF,KAJT;AAKE,IAAA,KAAK,EAAEQ,KALT;AAME,IAAA,SAAS,EAAEK,SANb;AAOE,IAAA,WAAW,EACT,OAAOP,OAAO,CAACG,WAAf,KAA+B,UAA/B,GACKV,KAAD,iBAAkC,oBAAC,WAAD,EAAiBA,KAAjB,CADtC,GAEIO,OAAO,CAACG,WAVhB;AAYE,IAAA,QAAQ,EAAER,QAAQ,GAAGe,MAAH,GAAYN,SAZhC;AAaE,IAAA,iBAAiB,EAAEL;AAbrB,KADF;AAiBD,CAjEc,CAAf","sourcesContent":["import * as React from 'react';\nimport { StackActions } from '@react-navigation/native';\n\nimport HeaderSegment from './HeaderSegment';\nimport HeaderTitle from './HeaderTitle';\nimport debounce from '../../utils/debounce';\nimport type { StackHeaderProps, StackHeaderTitleProps } from '../../types';\n\nexport default React.memo(function Header(props: StackHeaderProps) {\n  const {\n    scene,\n    previous,\n    layout,\n    insets,\n    navigation,\n    styleInterpolator,\n  } = props;\n  const { options } = scene.descriptor;\n  const title =\n    typeof options.headerTitle !== 'function' &&\n    options.headerTitle !== undefined\n      ? options.headerTitle\n      : options.title !== undefined\n      ? options.title\n      : scene.route.name;\n\n  let leftLabel;\n\n  // The label for the left back button shows the title of the previous screen\n  // If a custom label is specified, we use it, otherwise use previous screen's title\n  if (options.headerBackTitle !== undefined) {\n    leftLabel = options.headerBackTitle;\n  } else if (previous) {\n    const o = previous.descriptor.options;\n\n    leftLabel =\n      typeof o.headerTitle !== 'function' && o.headerTitle !== undefined\n        ? o.headerTitle\n        : o.title !== undefined\n        ? o.title\n        : previous.route.name;\n  }\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const goBack = React.useCallback(\n    debounce(() => {\n      if (navigation.isFocused() && navigation.canGoBack()) {\n        navigation.dispatch({\n          ...StackActions.pop(),\n          source: scene.route.key,\n        });\n      }\n    }, 50),\n    [navigation, scene.route.key]\n  );\n\n  return (\n    <HeaderSegment\n      {...options}\n      insets={insets}\n      layout={layout}\n      scene={scene}\n      title={title}\n      leftLabel={leftLabel}\n      headerTitle={\n        typeof options.headerTitle !== 'function'\n          ? (props: StackHeaderTitleProps) => <HeaderTitle {...props} />\n          : options.headerTitle\n      }\n      onGoBack={previous ? goBack : undefined}\n      styleInterpolator={styleInterpolator}\n    />\n  );\n});\n"]}