{"version":3,"sources":["StackView.tsx"],"names":["React","View","Platform","StyleSheet","SafeAreaConsumer","NavigationHelpersContext","StackActions","GestureHandlerRootView","CardStack","KeyboardManager","HeaderContainer","SafeAreaProviderCompat","GestureHandlerWrapper","isArrayEqual","a","b","length","every","it","index","StackView","Component","routes","previousRoutes","previousDescriptors","openingRouteKeys","closingRouteKeys","replacingRouteKeys","descriptors","route","descriptor","state","key","gestureEnabled","animationEnabled","options","filter","r","includes","findIndex","props","render","navigation","some","routeNames","name","navigate","setState","dispatch","pop","source","target","closing","emit","type","data","getDerivedStateFromProps","map","reduce","acc","slice","previousFocusedRoute","nextFocusedRoute","isAnimationEnabled","getAnimationTypeForReplace","animationTypeForReplace","splice","Error","keyboardHandlingEnabled","mode","headerMode","OS","_","rest","styles","container","insets","getPreviousRoute","getGesturesEnabled","handleOpenRoute","handleCloseRoute","handleTransitionStart","handleTransitionEnd","renderHeader","renderScene","handleGestureStart","handleGestureEnd","handleGestureCancel","create","flex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, Platform, StyleSheet } from 'react-native';\nimport { SafeAreaConsumer, EdgeInsets } from 'react-native-safe-area-context';\nimport {\n  NavigationHelpersContext,\n  StackActions,\n  StackNavigationState,\n  Route,\n} from '@react-navigation/native';\n\nimport { GestureHandlerRootView } from '../GestureHandler';\nimport CardStack from './CardStack';\nimport KeyboardManager from '../KeyboardManager';\nimport HeaderContainer, {\n  Props as HeaderContainerProps,\n} from '../Header/HeaderContainer';\nimport SafeAreaProviderCompat from '../SafeAreaProviderCompat';\nimport type {\n  StackNavigationHelpers,\n  StackNavigationConfig,\n  StackDescriptorMap,\n} from '../../types';\n\ntype Props = StackNavigationConfig & {\n  state: StackNavigationState;\n  navigation: StackNavigationHelpers;\n  descriptors: StackDescriptorMap;\n};\n\ntype State = {\n  // Local copy of the routes which are actually rendered\n  routes: Route<string>[];\n  // Previous routes, to compare whether routes have changed or not\n  previousRoutes: Route<string>[];\n  // Previous descriptors, to compare whether descriptors have changed or not\n  previousDescriptors: StackDescriptorMap;\n  // List of routes being opened, we need to animate pushing of these new routes\n  openingRouteKeys: string[];\n  // List of routes being closed, we need to animate popping of these routes\n  closingRouteKeys: string[];\n  // List of routes being replaced, we need to keep a copy until the new route animates in\n  replacingRouteKeys: string[];\n  // Since the local routes can vary from the routes from props, we need to keep the descriptors for old routes\n  // Otherwise we won't be able to access the options for routes that were removed\n  descriptors: StackDescriptorMap;\n};\n\nconst GestureHandlerWrapper = GestureHandlerRootView ?? View;\n\n/**\n * Compare two arrays with primitive values as the content.\n * We need to make sure that both values and order match.\n */\nconst isArrayEqual = (a: any[], b: any[]) =>\n  a.length === b.length && a.every((it, index) => it === b[index]);\n\nexport default class StackView extends React.Component<Props, State> {\n  static getDerivedStateFromProps(\n    props: Readonly<Props>,\n    state: Readonly<State>\n  ) {\n    // If there was no change in routes, we don't need to compute anything\n    if (\n      (props.state.routes === state.previousRoutes ||\n        isArrayEqual(\n          props.state.routes.map((r) => r.key),\n          state.previousRoutes.map((r) => r.key)\n        )) &&\n      state.routes.length\n    ) {\n      let routes = state.routes;\n      let previousRoutes = state.previousRoutes;\n      let descriptors = props.descriptors;\n      let previousDescriptors = state.previousDescriptors;\n\n      if (props.descriptors !== state.previousDescriptors) {\n        descriptors = state.routes.reduce<StackDescriptorMap>((acc, route) => {\n          acc[route.key] =\n            props.descriptors[route.key] || state.descriptors[route.key];\n\n          return acc;\n        }, {});\n\n        previousDescriptors = props.descriptors;\n      }\n\n      if (props.state.routes !== state.previousRoutes) {\n        // if any route objects have changed, we should update them\n        const map = props.state.routes.reduce<Record<string, Route<string>>>(\n          (acc, route) => {\n            acc[route.key] = route;\n            return acc;\n          },\n          {}\n        );\n\n        routes = state.routes.map((route) => map[route.key] || route);\n        previousRoutes = props.state.routes;\n      }\n\n      return {\n        routes,\n        previousRoutes,\n        descriptors,\n        previousDescriptors,\n      };\n    }\n\n    // Here we determine which routes were added or removed to animate them\n    // We keep a copy of the route being removed in local state to be able to animate it\n\n    let routes =\n      props.state.index < props.state.routes.length - 1\n        ? // Remove any extra routes from the state\n          // The last visible route should be the focused route, i.e. at current index\n          props.state.routes.slice(0, props.state.index + 1)\n        : props.state.routes;\n\n    // Now we need to determine which routes were added and removed\n    let {\n      openingRouteKeys,\n      closingRouteKeys,\n      replacingRouteKeys,\n      previousRoutes,\n    } = state;\n\n    const previousFocusedRoute = previousRoutes[previousRoutes.length - 1] as\n      | Route<string>\n      | undefined;\n    const nextFocusedRoute = routes[routes.length - 1];\n\n    const isAnimationEnabled = (key: string) => {\n      const descriptor = props.descriptors[key] || state.descriptors[key];\n\n      return descriptor ? descriptor.options.animationEnabled !== false : true;\n    };\n\n    const getAnimationTypeForReplace = (key: string) => {\n      const descriptor = props.descriptors[key] || state.descriptors[key];\n\n      return descriptor.options.animationTypeForReplace ?? 'push';\n    };\n\n    if (\n      previousFocusedRoute &&\n      previousFocusedRoute.key !== nextFocusedRoute.key\n    ) {\n      // We only need to animate routes if the focused route changed\n      // Animating previous routes won't be visible coz the focused route is on top of everything\n\n      if (!previousRoutes.some((r) => r.key === nextFocusedRoute.key)) {\n        // A new route has come to the focus, we treat this as a push\n        // A replace can also trigger this, the animation should look like push\n\n        if (\n          isAnimationEnabled(nextFocusedRoute.key) &&\n          !openingRouteKeys.includes(nextFocusedRoute.key)\n        ) {\n          // In this case, we need to animate pushing the focused route\n          // We don't care about animating any other added routes because they won't be visible\n          openingRouteKeys = [...openingRouteKeys, nextFocusedRoute.key];\n\n          closingRouteKeys = closingRouteKeys.filter(\n            (key) => key !== nextFocusedRoute.key\n          );\n          replacingRouteKeys = replacingRouteKeys.filter(\n            (key) => key !== nextFocusedRoute.key\n          );\n\n          if (!routes.some((r) => r.key === previousFocusedRoute.key)) {\n            // The previous focused route isn't present in state, we treat this as a replace\n\n            openingRouteKeys = openingRouteKeys.filter(\n              (key) => key !== previousFocusedRoute.key\n            );\n\n            if (getAnimationTypeForReplace(nextFocusedRoute.key) === 'pop') {\n              closingRouteKeys = [\n                ...closingRouteKeys,\n                previousFocusedRoute.key,\n              ];\n\n              // By default, new routes have a push animation, so we add it to `openingRouteKeys` before\n              // But since user configured it to animate the old screen like a pop, we need to add this without animation\n              // So remove it from `openingRouteKeys` which will remove the animation\n              openingRouteKeys = openingRouteKeys.filter(\n                (key) => key !== nextFocusedRoute.key\n              );\n\n              // Keep the route being removed at the end to animate it out\n              routes = [...routes, previousFocusedRoute];\n            } else {\n              replacingRouteKeys = [\n                ...replacingRouteKeys,\n                previousFocusedRoute.key,\n              ];\n\n              closingRouteKeys = closingRouteKeys.filter(\n                (key) => key !== previousFocusedRoute.key\n              );\n\n              // Keep the old route in the state because it's visible under the new route, and removing it will feel abrupt\n              // We need to insert it just before the focused one (the route being pushed)\n              // After the push animation is completed, routes being replaced will be removed completely\n              routes = routes.slice();\n              routes.splice(routes.length - 1, 0, previousFocusedRoute);\n            }\n          }\n        }\n      } else if (!routes.some((r) => r.key === previousFocusedRoute.key)) {\n        // The previously focused route was removed, we treat this as a pop\n\n        if (\n          isAnimationEnabled(previousFocusedRoute.key) &&\n          !closingRouteKeys.includes(previousFocusedRoute.key)\n        ) {\n          closingRouteKeys = [...closingRouteKeys, previousFocusedRoute.key];\n\n          // Sometimes a route can be closed before the opening animation finishes\n          // So we also need to remove it from the opening list\n          openingRouteKeys = openingRouteKeys.filter(\n            (key) => key !== previousFocusedRoute.key\n          );\n          replacingRouteKeys = replacingRouteKeys.filter(\n            (key) => key !== previousFocusedRoute.key\n          );\n\n          // Keep a copy of route being removed in the state to be able to animate it\n          routes = [...routes, previousFocusedRoute];\n        }\n      } else {\n        // Looks like some routes were re-arranged and no focused routes were added/removed\n        // i.e. the currently focused route already existed and the previously focused route still exists\n        // We don't know how to animate this\n      }\n    } else if (replacingRouteKeys.length || closingRouteKeys.length) {\n      // Keep the routes we are closing or replacing if animation is enabled for them\n      routes = routes.slice();\n      routes.splice(\n        routes.length - 1,\n        0,\n        ...state.routes.filter(({ key }) =>\n          isAnimationEnabled(key)\n            ? replacingRouteKeys.includes(key) || closingRouteKeys.includes(key)\n            : false\n        )\n      );\n    }\n\n    if (!routes.length) {\n      throw new Error(\n        'There should always be at least one route in the navigation state.'\n      );\n    }\n\n    const descriptors = routes.reduce<StackDescriptorMap>((acc, route) => {\n      acc[route.key] =\n        props.descriptors[route.key] || state.descriptors[route.key];\n\n      return acc;\n    }, {});\n\n    return {\n      routes,\n      previousRoutes: props.state.routes,\n      previousDescriptors: props.descriptors,\n      openingRouteKeys,\n      closingRouteKeys,\n      replacingRouteKeys,\n      descriptors,\n    };\n  }\n\n  state: State = {\n    routes: [],\n    previousRoutes: [],\n    previousDescriptors: {},\n    openingRouteKeys: [],\n    closingRouteKeys: [],\n    replacingRouteKeys: [],\n    descriptors: {},\n  };\n\n  private getGesturesEnabled = ({ route }: { route: Route<string> }) => {\n    const descriptor = this.state.descriptors[route.key];\n\n    if (descriptor) {\n      const { gestureEnabled, animationEnabled } = descriptor.options;\n\n      if (animationEnabled === false) {\n        // When animation is disabled, also disable gestures\n        // The gesture to dismiss a route will look weird when not animated\n        return false;\n      }\n\n      return gestureEnabled !== false;\n    }\n\n    return false;\n  };\n\n  private getPreviousRoute = ({ route }: { route: Route<string> }) => {\n    const { closingRouteKeys, replacingRouteKeys } = this.state;\n    const routes = this.state.routes.filter(\n      (r) =>\n        r.key === route.key ||\n        (!closingRouteKeys.includes(r.key) &&\n          !replacingRouteKeys.includes(r.key))\n    );\n\n    const index = routes.findIndex((r) => r.key === route.key);\n\n    return routes[index - 1];\n  };\n\n  private renderScene = ({ route }: { route: Route<string> }) => {\n    const descriptor =\n      this.state.descriptors[route.key] || this.props.descriptors[route.key];\n\n    if (!descriptor) {\n      return null;\n    }\n\n    return descriptor.render();\n  };\n\n  private renderHeader = (props: HeaderContainerProps) => {\n    return <HeaderContainer {...props} />;\n  };\n\n  private handleOpenRoute = ({ route }: { route: Route<string> }) => {\n    const { state, navigation } = this.props;\n    const { closingRouteKeys, replacingRouteKeys } = this.state;\n\n    if (\n      closingRouteKeys.some((key) => key === route.key) &&\n      replacingRouteKeys.every((key) => key !== route.key) &&\n      state.routeNames.includes(route.name) &&\n      !state.routes.some((r) => r.key === route.key)\n    ) {\n      // If route isn't present in current state, but was closing, assume that a close animation was cancelled\n      // So we need to add this route back to the state\n      navigation.navigate(route);\n    } else {\n      this.setState((state) => ({\n        routes: state.replacingRouteKeys.length\n          ? state.routes.filter(\n              (r) => !state.replacingRouteKeys.includes(r.key)\n            )\n          : state.routes,\n        openingRouteKeys: state.openingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n        closingRouteKeys: state.closingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n        replacingRouteKeys: [],\n      }));\n    }\n  };\n\n  private handleCloseRoute = ({ route }: { route: Route<string> }) => {\n    const { state, navigation } = this.props;\n\n    if (state.routes.some((r) => r.key === route.key)) {\n      // If a route exists in state, trigger a pop\n      // This will happen in when the route was closed from the card component\n      // e.g. When the close animation triggered from a gesture ends\n      navigation.dispatch({\n        ...StackActions.pop(),\n        source: route.key,\n        target: state.key,\n      });\n    } else {\n      // We need to clean up any state tracking the route and pop it immediately\n      this.setState((state) => ({\n        routes: state.routes.filter((r) => r.key !== route.key),\n        openingRouteKeys: state.openingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n        closingRouteKeys: state.closingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n      }));\n    }\n  };\n\n  private handleTransitionStart = (\n    { route }: { route: Route<string> },\n    closing: boolean\n  ) =>\n    this.props.navigation.emit({\n      type: 'transitionStart',\n      data: { closing },\n      target: route.key,\n    });\n\n  private handleTransitionEnd = (\n    { route }: { route: Route<string> },\n    closing: boolean\n  ) =>\n    this.props.navigation.emit({\n      type: 'transitionEnd',\n      data: { closing },\n      target: route.key,\n    });\n\n  private handleGestureStart = ({ route }: { route: Route<string> }) => {\n    this.props.navigation.emit({\n      type: 'gestureStart',\n      target: route.key,\n    });\n  };\n\n  private handleGestureEnd = ({ route }: { route: Route<string> }) => {\n    this.props.navigation.emit({\n      type: 'gestureEnd',\n      target: route.key,\n    });\n  };\n\n  private handleGestureCancel = ({ route }: { route: Route<string> }) => {\n    this.props.navigation.emit({\n      type: 'gestureCancel',\n      target: route.key,\n    });\n  };\n\n  render() {\n    const {\n      state,\n      navigation,\n      keyboardHandlingEnabled,\n      mode = 'card',\n      headerMode = mode === 'card' && Platform.OS === 'ios'\n        ? 'float'\n        : 'screen',\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      descriptors: _,\n      ...rest\n    } = this.props;\n\n    const {\n      routes,\n      descriptors,\n      openingRouteKeys,\n      closingRouteKeys,\n    } = this.state;\n\n    return (\n      <NavigationHelpersContext.Provider value={navigation}>\n        <GestureHandlerWrapper style={styles.container}>\n          <SafeAreaProviderCompat>\n            <SafeAreaConsumer>\n              {(insets) => (\n                <KeyboardManager enabled={keyboardHandlingEnabled !== false}>\n                  {(props) => (\n                    <CardStack\n                      mode={mode}\n                      insets={insets as EdgeInsets}\n                      getPreviousRoute={this.getPreviousRoute}\n                      getGesturesEnabled={this.getGesturesEnabled}\n                      routes={routes}\n                      openingRouteKeys={openingRouteKeys}\n                      closingRouteKeys={closingRouteKeys}\n                      onOpenRoute={this.handleOpenRoute}\n                      onCloseRoute={this.handleCloseRoute}\n                      onTransitionStart={this.handleTransitionStart}\n                      onTransitionEnd={this.handleTransitionEnd}\n                      renderHeader={this.renderHeader}\n                      renderScene={this.renderScene}\n                      headerMode={headerMode}\n                      state={state}\n                      descriptors={descriptors}\n                      onGestureStart={this.handleGestureStart}\n                      onGestureEnd={this.handleGestureEnd}\n                      onGestureCancel={this.handleGestureCancel}\n                      {...rest}\n                      {...props}\n                    />\n                  )}\n                </KeyboardManager>\n              )}\n            </SafeAreaConsumer>\n          </SafeAreaProviderCompat>\n        </GestureHandlerWrapper>\n      </NavigationHelpersContext.Provider>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n"]}