{"version":3,"sources":["Screens.tsx"],"names":["React","Animated","View","Platform","Screens","require","e","WebScreen","Component","render","props","active","style","rest","display","AnimatedWebScreen","createAnimatedComponent","MaybeScreenContainer","enabled","OS","screensEnabled","MaybeScreen"],"mappings":";;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,QAAT,EAAmBC,IAAnB,EAAyBC,QAAzB,QAAoD,cAApD;AAEA,IAAIC,OAAJ;;AAEA,IAAI;AACFA,EAAAA,OAAO,GAAGC,OAAO,CAAC,sBAAD,CAAjB;AACD,CAFD,CAEE,OAAOC,CAAP,EAAU,CAEX,CAFC,CACA;AAGF;AACA;AACA;;;AACA,MAAMC,SAAN,SAAwBP,KAAK,CAACQ,SAA9B,CAKE;AACAC,EAAAA,MAAM,GAAG;AACP,wBAAmC,KAAKC,KAAxC;AAAA,UAAM;AAAEC,MAAAA,MAAF;AAAUC,MAAAA;AAAV,KAAN;AAAA,UAA0BC,IAA1B;;AAEA,wBACE,oBAAC,IAAD,CACE;AADF;AAEE,MAAA,MAAM,EAAE,CAACF,MAFX;AAGE,MAAA,KAAK,EAAE,CAACC,KAAD,EAAQ;AAAEE,QAAAA,OAAO,EAAEH,MAAM,GAAG,MAAH,GAAY;AAA7B,OAAR;AAHT,OAIME,IAJN,EADF;AAQD;;AAZD;;AAeF,MAAME,iBAAiB,GAAGd,QAAQ,CAACe,uBAAT,CAAiCT,SAAjC,CAA1B;AAEA,OAAO,MAAMU,oBAAoB,GAAG,UAM9B;AAAA,MAN+B;AACnCC,IAAAA;AADmC,GAM/B;AAAA,MAJDL,IAIC;;AACJ,MAAIK,OAAO,IAAIf,QAAQ,CAACgB,EAAT,KAAgB,KAA3B,IAAoCf,OAApC,IAA+CA,OAAO,CAACgB,cAAR,EAAnD,EAA6E;AAC3E,wBAAO,oBAAC,OAAD,CAAS,eAAT,EAA6BP,IAA7B,CAAP;AACD;;AAED,sBAAO,oBAAC,IAAD,EAAUA,IAAV,CAAP;AACD,CAZM;AAcP,OAAO,MAAMQ,WAAW,GAAG,WAQrB;AAAA,MARsB;AAC1BH,IAAAA,OAD0B;AAE1BP,IAAAA;AAF0B,GAQtB;AAAA,MALDE,IAKC;;AACJ,MAAIK,OAAO,IAAIf,QAAQ,CAACgB,EAAT,KAAgB,KAA/B,EAAsC;AACpC,wBAAO,oBAAC,iBAAD;AAAmB,MAAA,MAAM,EAAER;AAA3B,OAAuCE,IAAvC,EAAP;AACD;;AAED,MAAIK,OAAO,IAAId,OAAX,IAAsBA,OAAO,CAACgB,cAAR,EAA1B,EAAoD;AAClD;AACA,wBAAO,oBAAC,OAAD,CAAS,MAAT;AAAgB,MAAA,MAAM,EAAET;AAAxB,OAAoCE,IAApC,EAAP;AACD;;AAED,sBAAO,oBAAC,IAAD,EAAUA,IAAV,CAAP;AACD,CAnBM","sourcesContent":["import * as React from 'react';\nimport { Animated, View, Platform, ViewProps } from 'react-native';\n\nlet Screens: typeof import('react-native-screens') | undefined;\n\ntry {\n  Screens = require('react-native-screens');\n} catch (e) {\n  // Ignore\n}\n\n// The web implementation in react-native-screens seems buggy.\n// The view doesn't become visible after coming back in some cases.\n// So we use our custom implementation.\nclass WebScreen extends React.Component<\n  ViewProps & {\n    active: number;\n    children: React.ReactNode;\n  }\n> {\n  render() {\n    const { active, style, ...rest } = this.props;\n\n    return (\n      <View\n        // @ts-expect-error: hidden exists on web, but not in React Native\n        hidden={!active}\n        style={[style, { display: active ? 'flex' : 'none' }]}\n        {...rest}\n      />\n    );\n  }\n}\n\nconst AnimatedWebScreen = Animated.createAnimatedComponent(WebScreen);\n\nexport const MaybeScreenContainer = ({\n  enabled,\n  ...rest\n}: ViewProps & {\n  enabled: boolean;\n  children: React.ReactNode;\n}) => {\n  if (enabled && Platform.OS !== 'web' && Screens && Screens.screensEnabled()) {\n    return <Screens.ScreenContainer {...rest} />;\n  }\n\n  return <View {...rest} />;\n};\n\nexport const MaybeScreen = ({\n  enabled,\n  active,\n  ...rest\n}: ViewProps & {\n  enabled: boolean;\n  active: 0 | 1 | Animated.AnimatedInterpolation;\n  children: React.ReactNode;\n}) => {\n  if (enabled && Platform.OS === 'web') {\n    return <AnimatedWebScreen active={active} {...rest} />;\n  }\n\n  if (enabled && Screens && Screens.screensEnabled()) {\n    // @ts-expect-error: stackPresentation is incorrectly marked as required\n    return <Screens.Screen active={active} {...rest} />;\n  }\n\n  return <View {...rest} />;\n};\n"]}