{"version":3,"sources":["useLinking.native.tsx"],"names":["React","Linking","Platform","getActionFromState","getStateFromPath","getStateFromPathDefault","isUsingLinking","useLinking","ref","enabled","prefixes","config","useEffect","Error","OS","join","trim","enabledRef","useRef","prefixesRef","configRef","getStateFromPathRef","current","extractPathFromURL","useCallback","url","prefix","startsWith","replace","undefined","getInitialState","Promise","race","getInitialURL","resolve","setTimeout","path","listener","navigation","state","action","dispatch","resetRoot","addEventListener","removeEventListener"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Linking, Platform } from 'react-native';\nimport {\n  getActionFromState,\n  getStateFromPath as getStateFromPathDefault,\n  NavigationContainerRef,\n} from '@react-navigation/core';\nimport type { LinkingOptions } from './types';\n\nlet isUsingLinking = false;\n\nexport default function useLinking(\n  ref: React.RefObject<NavigationContainerRef>,\n  {\n    enabled = true,\n    prefixes,\n    config,\n    getStateFromPath = getStateFromPathDefault,\n  }: LinkingOptions\n) {\n  React.useEffect(() => {\n    if (enabled !== false && isUsingLinking) {\n      throw new Error(\n        [\n          'Looks like you have configured linking in multiple places. This is likely an error since deep links should only be handled in one place to avoid conflicts. Make sure that:',\n          \"- You are not using both 'linking' prop and 'useLinking'\",\n          \"- You don't have 'useLinking' in multiple components\",\n          Platform.OS === 'android'\n            ? \"- You have set 'android:launchMode=singleTask' in the '<activity />' section of the 'AndroidManifest.xml' file to avoid launching multiple instances\"\n            : '',\n        ]\n          .join('\\n')\n          .trim()\n      );\n    } else {\n      isUsingLinking = enabled !== false;\n    }\n\n    return () => {\n      isUsingLinking = false;\n    };\n  });\n\n  // We store these options in ref to avoid re-creating getInitialState and re-subscribing listeners\n  // This lets user avoid wrapping the items in `React.useCallback` or `React.useMemo`\n  // Not re-creating `getInitialState` is important coz it makes it easier for the user to use in an effect\n  const enabledRef = React.useRef(enabled);\n  const prefixesRef = React.useRef(prefixes);\n  const configRef = React.useRef(config);\n  const getStateFromPathRef = React.useRef(getStateFromPath);\n\n  React.useEffect(() => {\n    enabledRef.current = enabled;\n    prefixesRef.current = prefixes;\n    configRef.current = config;\n    getStateFromPathRef.current = getStateFromPath;\n  }, [config, enabled, getStateFromPath, prefixes]);\n\n  const extractPathFromURL = React.useCallback((url: string) => {\n    for (const prefix of prefixesRef.current) {\n      if (url.startsWith(prefix)) {\n        return url.replace(prefix, '');\n      }\n    }\n\n    return undefined;\n  }, []);\n\n  const getInitialState = React.useCallback(async () => {\n    if (!enabledRef.current) {\n      return undefined;\n    }\n\n    const url = await (Promise.race([\n      Linking.getInitialURL(),\n      new Promise((resolve) =>\n        // Timeout in 150ms if `getInitialState` doesn't resolve\n        // Workaround for https://github.com/facebook/react-native/issues/25675\n        setTimeout(resolve, 150)\n      ),\n    ]) as Promise<string | null | undefined>);\n\n    const path = url ? extractPathFromURL(url) : null;\n\n    if (path) {\n      return getStateFromPathRef.current(path, configRef.current);\n    } else {\n      return undefined;\n    }\n  }, [extractPathFromURL]);\n\n  React.useEffect(() => {\n    const listener = ({ url }: { url: string }) => {\n      if (!enabled) {\n        return;\n      }\n\n      const path = extractPathFromURL(url);\n      const navigation = ref.current;\n\n      if (navigation && path) {\n        const state = getStateFromPathRef.current(path, configRef.current);\n\n        if (state) {\n          const action = getActionFromState(state);\n\n          if (action !== undefined) {\n            navigation.dispatch(action);\n          } else {\n            navigation.resetRoot(state);\n          }\n        }\n      }\n    };\n\n    Linking.addEventListener('url', listener);\n\n    return () => Linking.removeEventListener('url', listener);\n  }, [enabled, extractPathFromURL, ref]);\n\n  return {\n    getInitialState,\n  };\n}\n"]}